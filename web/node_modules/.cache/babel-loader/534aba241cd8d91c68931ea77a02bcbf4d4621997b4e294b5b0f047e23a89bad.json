{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport LIVE2DCUBISMFRAMEWORK from \"./live2dcubismframework.js\";\nimport Live2DCubismCore from \"https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js\";\nimport { LoaderResource } from '@pixi/loaders';\nclass Model extends PIXI.Container {\n  constructor(coreModel, textures, animator, physicsRig, userData, groups) {\n    super();\n    this._coreModel = coreModel;\n    this._textures = textures;\n    this._animator = animator;\n    this._physicsRig = physicsRig;\n    this._userData = userData;\n    this._groups = groups;\n    this._animator.groups = this._groups;\n    if (this._coreModel == null) {\n      return;\n    }\n    this._meshes = new Array(this._coreModel.drawables.ids.length);\n    for (var m = 0; m < this._meshes.length; ++m) {\n      var uvs = this._coreModel.drawables.vertexUvs[m].slice(0, this._coreModel.drawables.vertexUvs[m].length);\n      for (var v = 1; v < uvs.length; v += 2) {\n        uvs[v] = 1 - uvs[v];\n      }\n      this._meshes[m] = new CubismMesh(textures[this._coreModel.drawables.textureIndices[m]], this._coreModel.drawables.vertexPositions[m], uvs, this._coreModel.drawables.indices[m], PIXI.DRAW_MODES.TRIANGLES);\n      this._meshes[m].name = this._coreModel.drawables.ids[m];\n      this._meshes[m].scale.y *= -1;\n      this._meshes[m].isCulling = !Live2DCubismCore.Utils.hasIsDoubleSidedBit(this._coreModel.drawables.constantFlags[m]);\n      if (Live2DCubismCore.Utils.hasBlendAdditiveBit(this._coreModel.drawables.constantFlags[m])) {\n        if (this._coreModel.drawables.maskCounts[m] > 0) {\n          var addFilter = new PIXI.Filter();\n          addFilter.blendMode = PIXI.ColorBlend.blendMode.ADD;\n          this._meshes[m].filters = [addFilter];\n        } else {\n          this._meshes[m].blendMode = PIXI.ColorBlend.blendMode.ADD;\n        }\n      } else if (Live2DCubismCore.Utils.hasBlendMultiplicativeBit(this._coreModel.drawables.constantFlags[m])) {\n        if (this._coreModel.drawables.maskCounts[m] > 0) {\n          var multiplyFilter = new PIXI.Filter();\n          multiplyFilter.blendMode = PIXI.ColorBlend.blendMode.MULTIPLY;\n          this._meshes[m].filters = [multiplyFilter];\n        } else {\n          this._meshes[m].blendMode = PIXI.ColorBlend.blendMode.MULTIPLY;\n        }\n      }\n      this.addChild(this._meshes[m]);\n    }\n    ;\n    this._maskSpriteContainer = new MaskSpriteContainer(coreModel, this);\n    return this;\n  }\n  get parameters() {\n    return this._coreModel.parameters;\n  }\n  get parts() {\n    return this._coreModel.parts;\n  }\n  get drawables() {\n    return this._coreModel.drawables;\n  }\n  get canvasinfo() {\n    return this._coreModel.canvasinfo;\n  }\n  get textures() {\n    return this._textures;\n  }\n  get animator() {\n    return this._animator;\n  }\n  get userData() {\n    return this._userData;\n  }\n  get meshes() {\n    return this._meshes;\n  }\n  get masks() {\n    return this._maskSpriteContainer;\n  }\n  get groups() {\n    return this._groups;\n  }\n  update(delta) {\n    const deltaTime = 0.016 * delta;\n    this._animator.updateAndEvaluate(deltaTime);\n    if (this._physicsRig) {\n      this._physicsRig.updateAndEvaluate(deltaTime);\n    }\n    this._coreModel.update();\n    let sort = false;\n    for (let m = 0; m < this._meshes.length; ++m) {\n      this._meshes[m].alpha = this._coreModel.drawables.opacities[m];\n      this._meshes[m].visible = Live2DCubismCore.Utils.hasIsVisibleBit(this._coreModel.drawables.dynamicFlags[m]);\n      if (Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(this._coreModel.drawables.dynamicFlags[m])) {\n        this._meshes[m].vertices = this._coreModel.drawables.vertexPositions[m];\n        this._meshes[m].dirtyVertex = true;\n      }\n      if (Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(this._coreModel.drawables.dynamicFlags[m])) {\n        sort = true;\n      }\n    }\n    if (sort) {\n      this.children.sort((a, b) => {\n        const aIndex = this._meshes.indexOf(a);\n        const bIndex = this._meshes.indexOf(b);\n        const aRenderOrder = this._coreModel.drawables.renderOrders[aIndex];\n        const bRenderOrder = this._coreModel.drawables.renderOrders[bIndex];\n        return aRenderOrder - bRenderOrder;\n      });\n    }\n    this._coreModel.drawables.resetDynamicFlags();\n  }\n  destroy(options) {\n    if (this._coreModel != null) {\n      this._coreModel.release();\n    }\n    super.destroy(options);\n    this.masks.destroy();\n    this._meshes.forEach(m => {\n      m.destroy();\n    });\n    if (options === true || options.texture) {\n      this._textures.forEach(t => {\n        t.destroy();\n      });\n    }\n  }\n  getModelMeshById(id) {\n    if (this._meshes == null) return null;\n    for (const mesh of this._meshes) {\n      if (mesh.name === id) return mesh;\n    }\n    return null;\n  }\n  addParameterValueById(id, value) {\n    const p = this._coreModel.parameters.ids.indexOf(id);\n    if (p === -1) {\n      return;\n    }\n    this._coreModel.parameters.values[p] = this._coreModel.parameters.values[p] + value;\n  }\n  static _create(coreModel, textures, animator, physicsRig = null, userData = null, groups = null) {\n    const model = new Model(coreModel, textures, animator, physicsRig, userData, groups);\n    if (!model.isValid) {\n      model.destroy();\n      return null;\n    }\n    return model;\n  }\n  get isValid() {\n    return this._coreModel != null;\n  }\n}\nclass MaskSpriteContainer extends PIXI.Container {\n  constructor(coreModel, pixiModel) {\n    super();\n    this._maskShaderVertSrc = new String(`\n                attribute vec2 aVertexPosition;\n                attribute vec2 aTextureCoord;\n                uniform mat3 projectionMatrix;\n                varying vec2 vTextureCoord;\n                void main(void){\n                    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n                    vTextureCoord = aTextureCoord;\n                }\n                `);\n    this._maskShaderFragSrc = new String(`\n                varying vec2 vTextureCoord;\n                uniform sampler2D uSampler;\n                void main(void){\n                    vec4 c = texture2D(uSampler, vTextureCoord);\n                    c.r = c.a;\n                    c.g = 0.0;\n                    c.b = 0.0;\n                    gl_FragColor = c;\n                }\n                `);\n    this._maskShader = new PIXI.Filter(this._maskShaderVertSrc.toString(), this._maskShaderFragSrc.toString());\n    const _maskCounts = coreModel.drawables.maskCounts;\n    const _maskRelationList = coreModel.drawables.masks;\n    this._maskMeshContainers = new Array();\n    this._maskTextures = new Array();\n    this._maskSprites = new Array();\n    for (let m = 0; m < pixiModel.meshes.length; ++m) {\n      if (_maskCounts[m] > 0) {\n        const newContainer = new PIXI.Container();\n        for (let n = 0; n < _maskRelationList[m].length; ++n) {\n          const meshMaskID = coreModel.drawables.masks[m][n];\n          const maskMesh = new CubismMesh(pixiModel.meshes[meshMaskID].texture, pixiModel.meshes[meshMaskID].vertices, pixiModel.meshes[meshMaskID].uvs, pixiModel.meshes[meshMaskID].indices, PIXI.DRAW_MODES.TRIANGLES);\n          maskMesh.name = pixiModel.meshes[meshMaskID].name;\n          maskMesh.transform = pixiModel.meshes[meshMaskID].transform;\n          maskMesh.worldTransform = pixiModel.meshes[meshMaskID].worldTransform;\n          maskMesh.localTransform = pixiModel.meshes[meshMaskID].localTransform;\n          maskMesh.isCulling = pixiModel.meshes[meshMaskID].isCulling;\n          maskMesh.isMaskMesh = true;\n          maskMesh.filters = [this._maskShader];\n          newContainer.addChild(maskMesh);\n        }\n        newContainer.transform = pixiModel.transform;\n        newContainer.worldTransform = pixiModel.worldTransform;\n        newContainer.localTransform = pixiModel.localTransform;\n        this._maskMeshContainers.push(newContainer);\n        var newTexture = PIXI.RenderTexture.create(0, 0);\n        this._maskTextures.push(newTexture);\n        var newSprite = new PIXI.Sprite(newTexture);\n        this._maskSprites.push(newSprite);\n        this.addChild(newSprite);\n        pixiModel.meshes[m].mask = newSprite;\n      }\n    }\n    return this;\n  }\n  get maskSprites() {\n    return this._maskSprites;\n  }\n  get maskMeshes() {\n    return this._maskMeshContainers;\n  }\n  destroy(options) {\n    this._maskSprites.forEach(m => {\n      m.destroy();\n    });\n    this._maskTextures.forEach(m => {\n      m.destroy();\n    });\n    this._maskMeshContainers.forEach(m => {\n      m.destroy();\n    });\n    this._maskShader = null;\n  }\n  update(appRenderer) {\n    for (let m = 0; m < this._maskSprites.length; ++m) {\n      appRenderer.render(this._maskMeshContainers[m], this._maskTextures[m], true, null, false);\n    }\n  }\n  resize(viewWidth, viewHeight) {\n    for (let m = 0; m < this._maskTextures.length; ++m) {\n      this._maskTextures[m].resize(viewWidth, viewHeight, false);\n    }\n  }\n}\nclass ModelBuilder {\n  constructor() {\n    this._textures = new Array();\n    this._timeScale = 1;\n    this._animatorBuilder = new LIVE2DCUBISMFRAMEWORK.AnimatorBuilder();\n  }\n  setMoc(value) {\n    this._moc = value;\n    return this;\n  }\n  setTimeScale(value) {\n    this._timeScale = value;\n    return this;\n  }\n  setPhysics3Json(value) {\n    if (!this._physicsRigBuilder) {\n      this._physicsRigBuilder = new LIVE2DCUBISMFRAMEWORK.PhysicsRigBuilder();\n    }\n    this._physicsRigBuilder.setPhysics3Json(value);\n    return this;\n  }\n  setUserData3Json(value) {\n    if (!this._userDataBuilder) {\n      this._userDataBuilder = new LIVE2DCUBISMFRAMEWORK.UserDataBuilder();\n    }\n    this._userDataBuilder.setUserData3Json(value);\n    return this;\n  }\n  addTexture(index, texture) {\n    this._textures.splice(index, 0, texture);\n    return this;\n  }\n  addAnimatorLayer(name, blender = LIVE2DCUBISMFRAMEWORK.BuiltinAnimationBlenders.OVERRIDE, weight = 1) {\n    this._animatorBuilder.addLayer(name, blender, weight);\n    return this;\n  }\n  addGroups(groups) {\n    this._groups = groups;\n    return this;\n  }\n  buildFromModel3Json(loader, model3Obj, callbackFunc) {\n    const model3URL = model3Obj.url;\n    const modelDir = model3URL.substring(0, model3URL.lastIndexOf(\"/\") + 1);\n    let textureCount = 0;\n    if (model3Obj.data['FileReferences']['Moc']) {\n      loader.add('moc', modelDir + model3Obj.data['FileReferences']['Moc'], {\n        xhrType: LoaderResource.XHR_RESPONSE_TYPE.BUFFER\n      });\n    }\n    if (model3Obj.data['FileReferences']['Textures']) {\n      model3Obj.data['FileReferences']['Textures'].forEach(element => {\n        loader.add('texture' + textureCount, modelDir + element);\n        textureCount++;\n      });\n    }\n    if (model3Obj.data['FileReferences']['Physics']) {\n      loader.add('physics', modelDir + model3Obj.data['FileReferences']['Physics'], {\n        xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON\n      });\n    }\n    if (model3Obj.data['FileReferences']['UserData']) {\n      loader.add('userdata', modelDir + model3Obj.data['FileReferences']['UserData'], {\n        xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON\n      });\n    }\n    if (model3Obj.data['Groups']) {\n      this._groups = LIVE2DCUBISMFRAMEWORK.Groups.fromModel3Json(model3Obj.data);\n    }\n    loader.load((loader, resources) => {\n      if (resources['moc']) {\n        this.setMoc(Live2DCubismCore.Moc.fromArrayBuffer(resources['moc'].data));\n      }\n      if (resources['texture' + 0]) {\n        for (let i = 0; i < textureCount; i++) {\n          this.addTexture(i, resources['texture' + i].texture);\n        }\n      }\n      if (resources['physics']) {\n        this.setPhysics3Json(resources['physics'].data);\n      }\n      if (resources['userdata']) {\n        this.setUserData3Json(resources['userdata'].data);\n      }\n      const model = this.build();\n      callbackFunc(model);\n    });\n  }\n  build() {\n    const coreModel = Live2DCubismCore.Model.fromMoc(this._moc);\n    if (coreModel == null) {\n      return null;\n    }\n    const animator = this._animatorBuilder.setTarget(coreModel).setTimeScale(this._timeScale).build();\n    let physicsRig = null;\n    if (this._physicsRigBuilder) {\n      physicsRig = this._physicsRigBuilder.setTarget(coreModel).setTimeScale(this._timeScale).build();\n    }\n    let userData = null;\n    if (this._userDataBuilder) {\n      userData = this._userDataBuilder.setTarget(coreModel).build();\n    }\n    return Model._create(coreModel, this._textures, animator, physicsRig, userData, this._groups);\n  }\n}\nclass CubismMesh extends PIXI.Mesh {\n  constructor(texture, vertices, uvs, indices, drawMode) {\n    super(texture, vertices, uvs, indices, drawMode);\n    this.isCulling = false;\n    this.isMaskMesh = false;\n  }\n  _renderWebGL(renderer) {\n    if (this.isMaskMesh === true) {\n      renderer.state.setFrontFace(1);\n    } else {\n      renderer.state.setFrontFace(0);\n    }\n    if (this.isCulling === true) {\n      renderer.state.setCullFace(1);\n    } else {\n      renderer.state.setCullFace(0);\n    }\n    super._renderWebGL(renderer);\n    renderer.state.setFrontFace(0);\n  }\n}\nexport default {\n  Model,\n  MaskSpriteContainer,\n  ModelBuilder,\n  CubismMesh\n};","map":{"version":3,"names":["PIXI","LIVE2DCUBISMFRAMEWORK","Live2DCubismCore","LoaderResource","Model","Container","constructor","coreModel","textures","animator","physicsRig","userData","groups","_coreModel","_textures","_animator","_physicsRig","_userData","_groups","_meshes","Array","drawables","ids","length","m","uvs","vertexUvs","slice","v","CubismMesh","textureIndices","vertexPositions","indices","DRAW_MODES","TRIANGLES","name","scale","y","isCulling","Utils","hasIsDoubleSidedBit","constantFlags","hasBlendAdditiveBit","maskCounts","addFilter","Filter","blendMode","ColorBlend","ADD","filters","hasBlendMultiplicativeBit","multiplyFilter","MULTIPLY","addChild","_maskSpriteContainer","MaskSpriteContainer","parameters","parts","canvasinfo","meshes","masks","update","delta","deltaTime","updateAndEvaluate","sort","alpha","opacities","visible","hasIsVisibleBit","dynamicFlags","hasVertexPositionsDidChangeBit","vertices","dirtyVertex","hasRenderOrderDidChangeBit","children","a","b","aIndex","indexOf","bIndex","aRenderOrder","renderOrders","bRenderOrder","resetDynamicFlags","destroy","options","release","forEach","texture","t","getModelMeshById","id","mesh","addParameterValueById","value","p","values","_create","model","isValid","pixiModel","_maskShaderVertSrc","String","_maskShaderFragSrc","_maskShader","toString","_maskCounts","_maskRelationList","_maskMeshContainers","_maskTextures","_maskSprites","newContainer","n","meshMaskID","maskMesh","transform","worldTransform","localTransform","isMaskMesh","push","newTexture","RenderTexture","create","newSprite","Sprite","mask","maskSprites","maskMeshes","appRenderer","render","resize","viewWidth","viewHeight","ModelBuilder","_timeScale","_animatorBuilder","AnimatorBuilder","setMoc","_moc","setTimeScale","setPhysics3Json","_physicsRigBuilder","PhysicsRigBuilder","setUserData3Json","_userDataBuilder","UserDataBuilder","addTexture","index","splice","addAnimatorLayer","blender","BuiltinAnimationBlenders","OVERRIDE","weight","addLayer","addGroups","buildFromModel3Json","loader","model3Obj","callbackFunc","model3URL","url","modelDir","substring","lastIndexOf","textureCount","data","add","xhrType","XHR_RESPONSE_TYPE","BUFFER","element","JSON","Groups","fromModel3Json","load","resources","Moc","fromArrayBuffer","i","build","fromMoc","setTarget","Mesh","drawMode","_renderWebGL","renderer","state","setFrontFace","setCullFace"],"sources":["/Users/kaileying/Documents/Repos/BinLTools_Gin/web/src/components/live2dWigit/live2dcubismpixi.js"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport LIVE2DCUBISMFRAMEWORK from \"./live2dcubismframework.js\"\nimport Live2DCubismCore from \"https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js\"\nimport { LoaderResource } from '@pixi/loaders';\n\nclass Model extends PIXI.Container {\n    constructor(coreModel, textures, animator, physicsRig, userData, groups) {\n        super();\n        this._coreModel = coreModel;\n        this._textures = textures;\n        this._animator = animator;\n        this._physicsRig = physicsRig;\n        this._userData = userData;\n        this._groups = groups;\n        this._animator.groups = this._groups;\n\n        if (this._coreModel == null) {\n            return;\n        }\n\n        this._meshes = new Array(this._coreModel.drawables.ids.length);\n        for (var m = 0; m < this._meshes.length; ++m) {\n            var uvs = this._coreModel.drawables.vertexUvs[m].slice(0, this._coreModel.drawables.vertexUvs[m].length);\n            for (var v = 1; v < uvs.length; v += 2) {\n                uvs[v] = 1 - uvs[v];\n            }\n\n            this._meshes[m] = new CubismMesh(textures[this._coreModel.drawables.textureIndices[m]], this._coreModel.drawables.vertexPositions[m], uvs, this._coreModel.drawables.indices[m], PIXI.DRAW_MODES.TRIANGLES);\n            this._meshes[m].name = this._coreModel.drawables.ids[m];\n            this._meshes[m].scale.y *= -1;\n            this._meshes[m].isCulling = !Live2DCubismCore.Utils.hasIsDoubleSidedBit(this._coreModel.drawables.constantFlags[m]);\n            if (Live2DCubismCore.Utils.hasBlendAdditiveBit(this._coreModel.drawables.constantFlags[m])) {\n                if (this._coreModel.drawables.maskCounts[m] > 0) {\n                    var addFilter = new PIXI.Filter();\n                    addFilter.blendMode = PIXI.ColorBlend.blendMode.ADD;\n                    this._meshes[m].filters = [addFilter];\n                }\n                else {\n                    this._meshes[m].blendMode = PIXI.ColorBlend.blendMode.ADD;\n                }\n            }\n            else if (Live2DCubismCore.Utils.hasBlendMultiplicativeBit(this._coreModel.drawables.constantFlags[m])) {\n                if (this._coreModel.drawables.maskCounts[m] > 0) {\n                    var multiplyFilter = new PIXI.Filter();\n                    multiplyFilter.blendMode = PIXI.ColorBlend.blendMode.MULTIPLY;\n                    this._meshes[m].filters = [multiplyFilter];\n                }\n                else {\n                    this._meshes[m].blendMode = PIXI.ColorBlend.blendMode.MULTIPLY;\n                }\n            }\n            this.addChild(this._meshes[m]);\n        };\n\n        this._maskSpriteContainer = new MaskSpriteContainer(coreModel, this);\n        return this;\n        }\n\n        get parameters() {\n            return this._coreModel.parameters;\n        }\n    \n        get parts() {\n            return this._coreModel.parts;\n        }\n    \n        get drawables() {\n            return this._coreModel.drawables;\n        }\n    \n        get canvasinfo() {\n            return this._coreModel.canvasinfo;\n        }\n    \n        get textures() {\n            return this._textures;\n        }\n    \n        get animator() {\n            return this._animator;\n        }\n    \n        get userData() {\n            return this._userData;\n        }\n    \n        get meshes() {\n            return this._meshes;\n        }\n    \n        get masks() {\n            return this._maskSpriteContainer;\n        }\n    \n        get groups() {\n            return this._groups;\n        }\n\n        update(delta) {\n            const deltaTime = 0.016 * delta;\n            this._animator.updateAndEvaluate(deltaTime);\n            if (this._physicsRig) {\n                this._physicsRig.updateAndEvaluate(deltaTime);\n            }\n            this._coreModel.update();\n            let sort = false;\n            for (let m = 0; m < this._meshes.length; ++m) {\n                this._meshes[m].alpha = this._coreModel.drawables.opacities[m];\n                this._meshes[m].visible = Live2DCubismCore.Utils.hasIsVisibleBit(this._coreModel.drawables.dynamicFlags[m]);\n                if (Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(this._coreModel.drawables.dynamicFlags[m])) {\n                    this._meshes[m].vertices = this._coreModel.drawables.vertexPositions[m];\n                    this._meshes[m].dirtyVertex = true;\n                }\n                if (Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(this._coreModel.drawables.dynamicFlags[m])) {\n                    sort = true;\n                }\n            }\n            if (sort) {\n                this.children.sort((a, b) => {\n                    const aIndex = this._meshes.indexOf(a);\n                    const bIndex = this._meshes.indexOf(b);\n                    const aRenderOrder = this._coreModel.drawables.renderOrders[aIndex];\n                    const bRenderOrder = this._coreModel.drawables.renderOrders[bIndex];\n                    return aRenderOrder - bRenderOrder;\n                });\n            }\n            this._coreModel.drawables.resetDynamicFlags();\n        }\n\n        destroy(options) {\n            if (this._coreModel != null) {\n                this._coreModel.release();\n            }\n            super.destroy(options);\n            this.masks.destroy();\n            this._meshes.forEach(m => {\n                m.destroy();\n            });\n            if (options === true || options.texture) {\n                this._textures.forEach(t => {\n                    t.destroy();\n                });\n            }\n        }\n        \n\n        getModelMeshById(id) {\n            if (this._meshes == null) return null;\n            for (const mesh of this._meshes) {\n                if (mesh.name === id) return mesh;\n            }\n            return null;\n        }\n    \n        addParameterValueById(id, value) {\n            const p = this._coreModel.parameters.ids.indexOf(id);\n            if (p === -1) {\n                return;\n            }\n            this._coreModel.parameters.values[p] = this._coreModel.parameters.values[p] + value;\n        }\n    \n        static _create(coreModel, textures, animator, physicsRig = null, userData = null, groups = null) {\n            const model = new Model(coreModel, textures, animator, physicsRig, userData, groups);\n            if (!model.isValid) {\n                model.destroy();\n                return null;\n            }\n            return model;\n        }\n    \n        get isValid() {\n            return this._coreModel != null;\n        }\n    }\n    \n    class MaskSpriteContainer extends PIXI.Container {\n        constructor(coreModel, pixiModel) {\n            super();\n            this._maskShaderVertSrc = new String(`\n                attribute vec2 aVertexPosition;\n                attribute vec2 aTextureCoord;\n                uniform mat3 projectionMatrix;\n                varying vec2 vTextureCoord;\n                void main(void){\n                    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n                    vTextureCoord = aTextureCoord;\n                }\n                `);\n            this._maskShaderFragSrc = new String(`\n                varying vec2 vTextureCoord;\n                uniform sampler2D uSampler;\n                void main(void){\n                    vec4 c = texture2D(uSampler, vTextureCoord);\n                    c.r = c.a;\n                    c.g = 0.0;\n                    c.b = 0.0;\n                    gl_FragColor = c;\n                }\n                `);\n            this._maskShader = new PIXI.Filter(this._maskShaderVertSrc.toString(), this._maskShaderFragSrc.toString());\n            const _maskCounts = coreModel.drawables.maskCounts;\n            const _maskRelationList = coreModel.drawables.masks;\n            this._maskMeshContainers = new Array();\n            this._maskTextures = new Array();\n            this._maskSprites = new Array();\n            for (let m = 0; m < pixiModel.meshes.length; ++m) {\n                if (_maskCounts[m] > 0) {\n                    const newContainer = new PIXI.Container;\n                    for (let n = 0; n < _maskRelationList[m].length; ++n) {\n                        const meshMaskID = coreModel.drawables.masks[m][n];\n                        const maskMesh = new CubismMesh(pixiModel.meshes[meshMaskID].texture, pixiModel.meshes[meshMaskID].vertices, pixiModel.meshes[meshMaskID].uvs, pixiModel.meshes[meshMaskID].indices, PIXI.DRAW_MODES.TRIANGLES);\n                        maskMesh.name = pixiModel.meshes[meshMaskID].name;\n                        maskMesh.transform = pixiModel.meshes[meshMaskID].transform;\n                        maskMesh.worldTransform = pixiModel.meshes[meshMaskID].worldTransform;\n                        maskMesh.localTransform = pixiModel.meshes[meshMaskID].localTransform;\n                        maskMesh.isCulling = pixiModel.meshes[meshMaskID].isCulling;\n                        maskMesh.isMaskMesh = true;\n                        maskMesh.filters = [this._maskShader];\n                        newContainer.addChild(maskMesh);\n                    }\n                    newContainer.transform = pixiModel.transform;\n                    newContainer.worldTransform = pixiModel.worldTransform;\n                    newContainer.localTransform = pixiModel.localTransform;\n                    this._maskMeshContainers.push(newContainer);\n                    var newTexture = PIXI.RenderTexture.create(0, 0);\n                    this._maskTextures.push(newTexture);\n                    var newSprite = new PIXI.Sprite(newTexture);\n                    this._maskSprites.push(newSprite);\n                    this.addChild(newSprite);\n                    pixiModel.meshes[m].mask = newSprite;\n                }\n            }\n            return this;\n        }\n\n        get maskSprites() {\n            return this._maskSprites;\n        }\n    \n        get maskMeshes() {\n            return this._maskMeshContainers;\n        }\n\n        destroy(options) {\n            this._maskSprites.forEach(m => {\n                m.destroy();\n            });\n            this._maskTextures.forEach(m => {\n                m.destroy();\n            });\n            this._maskMeshContainers.forEach(m => {\n                m.destroy();\n            });\n            this._maskShader = null;\n        }\n    \n        update(appRenderer) {\n            for (let m = 0; m < this._maskSprites.length; ++m) {\n                appRenderer.render(this._maskMeshContainers[m], this._maskTextures[m], true, null, false);\n            }\n        }\n    \n        resize(viewWidth, viewHeight) {\n            for (let m = 0; m < this._maskTextures.length; ++m) {\n                this._maskTextures[m].resize(viewWidth, viewHeight, false);\n            }\n        }\n    }\n\n    class ModelBuilder {\n        constructor() {\n            this._textures = new Array();\n            this._timeScale = 1;\n            this._animatorBuilder = new LIVE2DCUBISMFRAMEWORK.AnimatorBuilder();\n        }\n    \n        setMoc(value) {\n            this._moc = value;\n            return this;\n        }\n    \n        setTimeScale(value) {\n            this._timeScale = value;\n            return this;\n        }\n    \n        setPhysics3Json(value) {\n            if (!this._physicsRigBuilder) {\n                this._physicsRigBuilder = new LIVE2DCUBISMFRAMEWORK.PhysicsRigBuilder();\n            }\n            this._physicsRigBuilder.setPhysics3Json(value);\n            return this;\n        }\n    \n        setUserData3Json(value) {\n            if (!this._userDataBuilder) {\n                this._userDataBuilder = new LIVE2DCUBISMFRAMEWORK.UserDataBuilder();\n            }\n            this._userDataBuilder.setUserData3Json(value);\n            return this;\n        }\n    \n        addTexture(index, texture) {\n            this._textures.splice(index, 0, texture);\n            return this;\n        }\n    \n        addAnimatorLayer(name, blender = LIVE2DCUBISMFRAMEWORK.BuiltinAnimationBlenders.OVERRIDE, weight = 1) {\n            this._animatorBuilder.addLayer(name, blender, weight);\n            return this;\n        }\n    \n        addGroups(groups) {\n            this._groups = groups;\n            return this;\n        }\n    \n        buildFromModel3Json(loader, model3Obj, callbackFunc) {\n            const model3URL = model3Obj.url;\n            const modelDir = model3URL.substring(0, model3URL.lastIndexOf(\"/\") + 1);\n            let textureCount = 0;\n    \n            if (model3Obj.data['FileReferences']['Moc']) {\n                loader.add('moc', modelDir + model3Obj.data['FileReferences']['Moc'], { xhrType: LoaderResource.XHR_RESPONSE_TYPE.BUFFER });\n            }\n            if (model3Obj.data['FileReferences']['Textures']) {\n                model3Obj.data['FileReferences']['Textures'].forEach((element) => {\n                    loader.add('texture' + textureCount, modelDir + element);\n                    textureCount++;\n                });\n            }\n            if (model3Obj.data['FileReferences']['Physics']) {\n                loader.add('physics', modelDir + model3Obj.data['FileReferences']['Physics'], { xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON });\n            }\n            if (model3Obj.data['FileReferences']['UserData']) {\n                loader.add('userdata', modelDir + model3Obj.data['FileReferences']['UserData'], { xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON });\n            }\n            if (model3Obj.data['Groups']) {\n                this._groups = LIVE2DCUBISMFRAMEWORK.Groups.fromModel3Json(model3Obj.data);\n            }\n    \n            loader.load((loader, resources) => {\n                if (resources['moc']) {\n                    this.setMoc(Live2DCubismCore.Moc.fromArrayBuffer(resources['moc'].data));\n                }\n                if (resources['texture' + 0]) {\n                    for (let i = 0; i < textureCount; i++) {\n                        this.addTexture(i, resources['texture' + i].texture);\n                    }\n                }\n                if (resources['physics']) {\n                    this.setPhysics3Json(resources['physics'].data);\n                }\n                if (resources['userdata']) {\n                    this.setUserData3Json(resources['userdata'].data);\n                }\n    \n                const model = this.build();\n                callbackFunc(model);\n            });\n        }\n    \n        build() {\n            const coreModel = Live2DCubismCore.Model.fromMoc(this._moc);\n            if (coreModel == null) {\n                return null;\n            }\n            const animator = this._animatorBuilder\n                .setTarget(coreModel)\n                .setTimeScale(this._timeScale)\n                .build();\n    \n            let physicsRig = null;\n            if (this._physicsRigBuilder) {\n                physicsRig = this._physicsRigBuilder\n                    .setTarget(coreModel)\n                    .setTimeScale(this._timeScale)\n                    .build();\n            }\n    \n            let userData = null;\n            if (this._userDataBuilder) {\n                userData = this._userDataBuilder\n                    .setTarget(coreModel)\n                    .build();\n            }\n    \n            return Model._create(coreModel, this._textures, animator, physicsRig, userData, this._groups);\n        }\n    }\n    \n    class CubismMesh extends PIXI.Mesh {\n        constructor(texture, vertices, uvs, indices, drawMode) {\n            super(texture, vertices, uvs, indices, drawMode);\n            this.isCulling = false;\n            this.isMaskMesh = false;\n        }\n    \n        _renderWebGL(renderer) {\n            if (this.isMaskMesh === true) {\n                renderer.state.setFrontFace(1);\n            } else {\n                renderer.state.setFrontFace(0);\n            }\n            if (this.isCulling === true) {\n                renderer.state.setCullFace(1);\n            } else {\n                renderer.state.setCullFace(0);\n            }\n            super._renderWebGL(renderer);\n            renderer.state.setFrontFace(0);\n        }\n    }\n    \n    export default { Model, MaskSpriteContainer, ModelBuilder, CubismMesh };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}