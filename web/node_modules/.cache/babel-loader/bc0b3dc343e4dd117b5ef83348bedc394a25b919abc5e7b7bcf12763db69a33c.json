{"ast":null,"code":"var LIVE2DCUBISMFRAMEWORK;\n(function (LIVE2DCUBISMFRAMEWORK) {\n  var AnimationPoint = function () {\n    function AnimationPoint(time, value) {\n      this.time = time;\n      this.value = value;\n    }\n    return AnimationPoint;\n  }();\n  LIVE2DCUBISMFRAMEWORK.AnimationPoint = AnimationPoint;\n  var AnimationUserDataBody = function () {\n    function AnimationUserDataBody(time, value) {\n      this.time = time;\n      this.value = value;\n    }\n    ;\n    return AnimationUserDataBody;\n  }();\n  LIVE2DCUBISMFRAMEWORK.AnimationUserDataBody = AnimationUserDataBody;\n  var BuiltinAnimationSegmentEvaluators = function () {\n    function BuiltinAnimationSegmentEvaluators() {}\n    BuiltinAnimationSegmentEvaluators.lerp = function (a, b, t) {\n      return new AnimationPoint(a.time + (b.time - a.time) * t, a.value + (b.value - a.value) * t);\n    };\n    BuiltinAnimationSegmentEvaluators.LINEAR = function (points, offset, time) {\n      var p0 = points[offset + 0];\n      var p1 = points[offset + 1];\n      var t = (time - p0.time) / (p1.time - p0.time);\n      return p0.value + (p1.value - p0.value) * t;\n    };\n    BuiltinAnimationSegmentEvaluators.BEZIER = function (points, offset, time) {\n      var t = (time - points[offset + 0].time) / (points[offset + 3].time - points[offset].time);\n      var p01 = BuiltinAnimationSegmentEvaluators.lerp(points[offset + 0], points[offset + 1], t);\n      var p12 = BuiltinAnimationSegmentEvaluators.lerp(points[offset + 1], points[offset + 2], t);\n      var p23 = BuiltinAnimationSegmentEvaluators.lerp(points[offset + 2], points[offset + 3], t);\n      var p012 = BuiltinAnimationSegmentEvaluators.lerp(p01, p12, t);\n      var p123 = BuiltinAnimationSegmentEvaluators.lerp(p12, p23, t);\n      return BuiltinAnimationSegmentEvaluators.lerp(p012, p123, t).value;\n    };\n    BuiltinAnimationSegmentEvaluators.STEPPED = function (points, offset, time) {\n      return points[offset + 0].value;\n    };\n    BuiltinAnimationSegmentEvaluators.INVERSE_STEPPED = function (points, offset, time) {\n      return points[offset + 1].value;\n    };\n    return BuiltinAnimationSegmentEvaluators;\n  }();\n  LIVE2DCUBISMFRAMEWORK.BuiltinAnimationSegmentEvaluators = BuiltinAnimationSegmentEvaluators;\n  var AnimationSegment = function () {\n    function AnimationSegment(offset, evaluate) {\n      this.offset = offset;\n      this.evaluate = evaluate;\n    }\n    return AnimationSegment;\n  }();\n  LIVE2DCUBISMFRAMEWORK.AnimationSegment = AnimationSegment;\n  var AnimationTrack = function () {\n    function AnimationTrack(targetId, points, segments) {\n      this.targetId = targetId;\n      this.points = points;\n      this.segments = segments;\n    }\n    AnimationTrack.prototype.evaluate = function (time) {\n      var s = 0;\n      var lastS = this.segments.length - 1;\n      for (; s < lastS; ++s) {\n        if (this.points[this.segments[s + 1].offset].time < time) {\n          continue;\n        }\n        break;\n      }\n      return this.segments[s].evaluate(this.points, this.segments[s].offset, time);\n    };\n    return AnimationTrack;\n  }();\n  LIVE2DCUBISMFRAMEWORK.AnimationTrack = AnimationTrack;\n  var Animation = function () {\n    function Animation(motion3Json) {\n      var _this = this;\n      this.modelTracks = new Array();\n      this.parameterTracks = new Array();\n      this.partOpacityTracks = new Array();\n      this.userDataBodys = new Array();\n      this.duration = motion3Json['Meta']['Duration'];\n      this.fps = motion3Json['Meta']['Fps'];\n      this.loop = motion3Json['Meta']['Loop'];\n      this.userDataCount = motion3Json['Meta']['UserDataCount'];\n      this.totalUserDataSize = motion3Json['Meta']['TotalUserDataSize'];\n      if (motion3Json['UserData'] != null) {\n        motion3Json['UserData'].forEach(function (u) {\n          _this.userDataBodys.push(new AnimationUserDataBody(u['Time'], u['Value']));\n        });\n        console.assert(this.userDataBodys.length === this.userDataCount);\n      }\n      motion3Json['Curves'].forEach(function (c) {\n        var s = c['Segments'];\n        var points = new Array();\n        var segments = new Array();\n        points.push(new AnimationPoint(s[0], s[1]));\n        for (var t = 2; t < s.length; t += 3) {\n          var offset = points.length - 1;\n          var evaluate = BuiltinAnimationSegmentEvaluators.LINEAR;\n          var type = s[t];\n          if (type == 1) {\n            evaluate = BuiltinAnimationSegmentEvaluators.BEZIER;\n            points.push(new AnimationPoint(s[t + 1], s[t + 2]));\n            points.push(new AnimationPoint(s[t + 3], s[t + 4]));\n            t += 4;\n          } else if (type == 2) {\n            evaluate = BuiltinAnimationSegmentEvaluators.STEPPED;\n          } else if (type == 3) {\n            evaluate = BuiltinAnimationSegmentEvaluators.INVERSE_STEPPED;\n          } else if (type != 0) {}\n          points.push(new AnimationPoint(s[t + 1], s[t + 2]));\n          segments.push(new AnimationSegment(offset, evaluate));\n        }\n        var track = new AnimationTrack(c['Id'], points, segments);\n        if (c['Target'] == 'Model') {\n          _this.modelTracks.push(track);\n        } else if (c['Target'] == 'Parameter') {\n          _this.parameterTracks.push(track);\n        } else if (c['Target'] == 'PartOpacity') {\n          _this.partOpacityTracks.push(track);\n        } else {}\n      });\n    }\n    Animation.fromMotion3Json = function (motion3Json) {\n      if (motion3Json == null) {\n        console.log(motion3Json);\n        return null;\n      }\n      var animation = new Animation(motion3Json);\n      // console.log(animation)\n      return animation.isValid ? animation : null;\n    };\n    Animation.prototype.addAnimationCallback = function (callbackFunc) {\n      if (this._callbackFunctions == null) this._callbackFunctions = new Array();\n      this._callbackFunctions.push(callbackFunc);\n    };\n    Animation.prototype.removeAnimationCallback = function (callbackFunc) {\n      if (this._callbackFunctions != null) {\n        var _target = -1;\n        for (var _index = 0; _index < this._callbackFunctions.length; _index++) {\n          if (this._callbackFunctions[_index] === callbackFunc) {\n            _target = _index;\n            break;\n          }\n        }\n        if (_target >= 0) this._callbackFunctions.splice(_target, 1);\n      }\n    };\n    Animation.prototype.clearAnimationCallback = function () {\n      this._callbackFunctions = [];\n    };\n    Animation.prototype.callAnimationCallback = function (value) {\n      if (this._callbackFunctions.length > 0) this._callbackFunctions.forEach(function (func) {\n        func(value);\n      });\n    };\n    Animation.prototype.evaluate = function (time, weight, blend, target, stackFlags, groups) {\n      if (groups === void 0) {\n        groups = null;\n      }\n      if (weight <= 0.01) {\n        return;\n      }\n      if (this.loop) {\n        while (time > this.duration) {\n          time -= this.duration;\n        }\n      }\n      this.parameterTracks.forEach(function (t) {\n        var p = target.parameters.ids.indexOf(t.targetId);\n        if (p >= 0) {\n          var sample = t.evaluate(time);\n          if (stackFlags[0][p] != true) {\n            target.parameters.values[p] = target.parameters.defaultValues[p];\n            stackFlags[0][p] = true;\n          }\n          target.parameters.values[p] = blend(target.parameters.values[p], sample, t.evaluate(0), weight);\n        }\n      });\n      this.partOpacityTracks.forEach(function (t) {\n        var p = target.parts.ids.indexOf(t.targetId);\n        if (p >= 0) {\n          var sample = t.evaluate(time);\n          if (stackFlags[1][p] != true) {\n            target.parts.opacities[p] = 1;\n            stackFlags[1][p] = true;\n          }\n          target.parts.opacities[p] = blend(target.parts.opacities[p], sample, t.evaluate(0), weight);\n        }\n      });\n      this.modelTracks.forEach(function (t) {\n        if (groups != null) {\n          var g = groups.getGroupById(t.targetId);\n          if (g != null && g.target === \"Parameter\") {\n            for (var _i = 0, _a = g.ids; _i < _a.length; _i++) {\n              var tid = _a[_i];\n              var p = target.parameters.ids.indexOf(tid);\n              if (p >= 0) {\n                var sample = t.evaluate(time);\n                if (stackFlags[0][p] != true) {\n                  target.parameters.values[p] = target.parameters.defaultValues[p];\n                  stackFlags[0][p] = true;\n                }\n                target.parameters.values[p] = blend(target.parameters.values[p], sample, t.evaluate(0), weight);\n              }\n            }\n          }\n        }\n      });\n      if (this._callbackFunctions != null) {\n        for (var _i = 0, _a = this.userDataBodys; _i < _a.length; _i++) {\n          var ud = _a[_i];\n          if (this.isEventTriggered(ud.time, time, this._lastTime, this.duration)) this.callAnimationCallback(ud.value);\n        }\n      }\n      this._lastTime = time;\n    };\n    Animation.prototype.isEventTriggered = function (timeEvaluate, timeForward, timeBack, duration) {\n      if (timeForward > timeBack) {\n        if (timeEvaluate > timeBack && timeEvaluate < timeForward) return true;\n      } else {\n        if (timeEvaluate > 0 && timeEvaluate < timeForward || timeEvaluate > timeBack && timeEvaluate < duration) return true;\n      }\n      return false;\n    };\n    Object.defineProperty(Animation.prototype, \"isValid\", {\n      get: function () {\n        return true;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    return Animation;\n  }();\n  LIVE2DCUBISMFRAMEWORK.Animation = Animation;\n  var BuiltinCrossfadeWeighters = function () {\n    function BuiltinCrossfadeWeighters() {}\n    BuiltinCrossfadeWeighters.LINEAR = function (time, duration) {\n      return time / duration;\n    };\n    return BuiltinCrossfadeWeighters;\n  }();\n  LIVE2DCUBISMFRAMEWORK.BuiltinCrossfadeWeighters = BuiltinCrossfadeWeighters;\n  var AnimationState = function () {\n    function AnimationState() {}\n    return AnimationState;\n  }();\n  LIVE2DCUBISMFRAMEWORK.AnimationState = AnimationState;\n  var BuiltinAnimationBlenders = function () {\n    function BuiltinAnimationBlenders() {}\n    BuiltinAnimationBlenders.OVERRIDE = function (source, destination, initial, weight) {\n      return destination * weight + source * (1 - weight);\n    };\n    BuiltinAnimationBlenders.ADD = function (source, destination, initial, weight) {\n      return source + (destination - initial) * weight;\n    };\n    BuiltinAnimationBlenders.MULTIPLY = function (source, destination, weight) {\n      return source * (1 + (destination - 1) * weight);\n    };\n    return BuiltinAnimationBlenders;\n  }();\n  LIVE2DCUBISMFRAMEWORK.BuiltinAnimationBlenders = BuiltinAnimationBlenders;\n  var AnimationLayer = function () {\n    function AnimationLayer() {\n      this.weight = 1;\n    }\n    Object.defineProperty(AnimationLayer.prototype, \"currentAnimation\", {\n      get: function () {\n        return this._animation;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(AnimationLayer.prototype, \"currentTime\", {\n      get: function () {\n        return this._time;\n      },\n      set: function (value) {\n        this._time = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(AnimationLayer.prototype, \"isPlaying\", {\n      get: function () {\n        return this._play;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    AnimationLayer.prototype.play = function (animation, fadeDuration) {\n      if (fadeDuration === void 0) {\n        fadeDuration = 0;\n      }\n      if (this._animation && fadeDuration > 0) {\n        this._goalAnimation = animation;\n        this._goalTime = 0;\n        this._fadeTime = 0;\n        this._fadeDuration = fadeDuration;\n      } else {\n        this._animation = animation;\n        this.currentTime = 0;\n        this._play = true;\n      }\n    };\n    AnimationLayer.prototype.resume = function () {\n      this._play = true;\n    };\n    AnimationLayer.prototype.pause = function () {\n      this._play = false;\n    };\n    AnimationLayer.prototype.stop = function () {\n      this._play = false;\n      this.currentTime = 0;\n    };\n    AnimationLayer.prototype._update = function (deltaTime) {\n      if (!this._play) {\n        return;\n      }\n      this._time += deltaTime;\n      this._goalTime += deltaTime;\n      this._fadeTime += deltaTime;\n      if (this._animation == null || !this._animation.loop && this._time > this._animation.duration) {\n        this.stop();\n        this._animation = null;\n      }\n    };\n    AnimationLayer.prototype._evaluate = function (target, stackFlags) {\n      if (this._animation == null) {\n        return;\n      }\n      var weight = this.weight < 1 ? this.weight : 1;\n      var animationWeight = this._goalAnimation != null ? weight * this.weightCrossfade(this._fadeTime, this._fadeDuration) : weight;\n      this._animation.evaluate(this._time, animationWeight, this.blend, target, stackFlags, this.groups);\n      if (this._goalAnimation != null) {\n        animationWeight = 1 - weight * this.weightCrossfade(this._fadeTime, this._fadeDuration);\n        this._goalAnimation.evaluate(this._goalTime, animationWeight, this.blend, target, stackFlags, this.groups);\n        if (this._fadeTime > this._fadeDuration) {\n          this._animation = this._goalAnimation;\n          this._time = this._goalTime;\n          this._goalAnimation = null;\n        }\n      }\n    };\n    return AnimationLayer;\n  }();\n  LIVE2DCUBISMFRAMEWORK.AnimationLayer = AnimationLayer;\n  var Animator = function () {\n    function Animator(target, timeScale, layers) {\n      this._target = target;\n      this.timeScale = timeScale;\n      this._layers = layers;\n    }\n    Object.defineProperty(Animator.prototype, \"target\", {\n      get: function () {\n        return this._target;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(Animator.prototype, \"isPlaying\", {\n      get: function () {\n        var ret = false;\n        this._layers.forEach(function (l) {\n          if (l.isPlaying) {\n            ret = true;\n            return;\n          }\n        });\n        return ret;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Animator.prototype.addLayer = function (name, blender, weight) {\n      if (blender === void 0) {\n        blender = BuiltinAnimationBlenders.OVERRIDE;\n      }\n      if (weight === void 0) {\n        weight = 1;\n      }\n      var layer = new AnimationLayer();\n      layer.blend = blender;\n      layer.weightCrossfade = BuiltinCrossfadeWeighters.LINEAR;\n      layer.weight = weight;\n      layer.groups = this.groups;\n      this._layers.set(name, layer);\n    };\n    Animator.prototype.getLayer = function (name) {\n      return this._layers.has(name) ? this._layers.get(name) : null;\n    };\n    Animator.prototype.removeLayer = function (name) {\n      return this._layers.has(name) ? this._layers.delete(name) : null;\n    };\n    Animator.prototype.clearLayers = function () {\n      this._layers.clear();\n    };\n    Animator.prototype.updateAndEvaluate = function (deltaTime) {\n      var _this = this;\n      deltaTime *= this.timeScale > 0 ? this.timeScale : 0;\n      if (deltaTime > 0.001) {\n        this._layers.forEach(function (l) {\n          l._update(deltaTime);\n        });\n      }\n      var paramStackFlags = new Array(this._target.parameters.count).fill(false);\n      var partsStackFlags = new Array(this._target.parts.count).fill(false);\n      var stackFlags = new Array(paramStackFlags, partsStackFlags);\n      this._layers.forEach(function (l) {\n        l._evaluate(_this._target, stackFlags);\n      });\n    };\n    Animator._create = function (target, timeScale, layers) {\n      var animator = new Animator(target, timeScale, layers);\n      return animator.isValid ? animator : null;\n    };\n    Object.defineProperty(Animator.prototype, \"isValid\", {\n      get: function () {\n        return this._target != null;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    return Animator;\n  }();\n  LIVE2DCUBISMFRAMEWORK.Animator = Animator;\n  var AnimatorBuilder = function () {\n    function AnimatorBuilder() {\n      this._timeScale = 1;\n      this._layerNames = new Array();\n      this._layerBlenders = new Array();\n      this._layerCrossfadeWeighters = new Array();\n      this._layerWeights = new Array();\n    }\n    AnimatorBuilder.prototype.setTarget = function (value) {\n      this._target = value;\n      return this;\n    };\n    AnimatorBuilder.prototype.setTimeScale = function (value) {\n      this._timeScale = value;\n      return this;\n    };\n    AnimatorBuilder.prototype.addLayer = function (name, blender, weight) {\n      if (blender === void 0) {\n        blender = BuiltinAnimationBlenders.OVERRIDE;\n      }\n      if (weight === void 0) {\n        weight = 1;\n      }\n      this._layerNames.push(name);\n      this._layerBlenders.push(blender);\n      this._layerCrossfadeWeighters.push(BuiltinCrossfadeWeighters.LINEAR);\n      this._layerWeights.push(weight);\n      return this;\n    };\n    AnimatorBuilder.prototype.build = function () {\n      var layers = new Map();\n      for (var l = 0; l < this._layerNames.length; ++l) {\n        var layer = new AnimationLayer();\n        layer.blend = this._layerBlenders[l];\n        layer.weightCrossfade = this._layerCrossfadeWeighters[l];\n        layer.weight = this._layerWeights[l];\n        layers.set(this._layerNames[l], layer);\n      }\n      return Animator._create(this._target, this._timeScale, layers);\n    };\n    return AnimatorBuilder;\n  }();\n  LIVE2DCUBISMFRAMEWORK.AnimatorBuilder = AnimatorBuilder;\n  var PhysicsVector2 = function () {\n    function PhysicsVector2(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n    PhysicsVector2.distance = function (a, b) {\n      return Math.abs(a.substract(b).length);\n    };\n    PhysicsVector2.dot = function (a, b) {\n      return a.x * b.x + a.y * b.y;\n    };\n    Object.defineProperty(PhysicsVector2.prototype, \"length\", {\n      get: function () {\n        return Math.sqrt(PhysicsVector2.dot(this, this));\n      },\n      enumerable: true,\n      configurable: true\n    });\n    PhysicsVector2.prototype.add = function (vector2) {\n      return new PhysicsVector2(this.x + vector2.x, this.y + vector2.y);\n    };\n    PhysicsVector2.prototype.substract = function (vector2) {\n      return new PhysicsVector2(this.x - vector2.x, this.y - vector2.y);\n    };\n    PhysicsVector2.prototype.multiply = function (vector2) {\n      return new PhysicsVector2(this.x * vector2.x, this.y * vector2.y);\n    };\n    PhysicsVector2.prototype.multiplyByScalar = function (scalar) {\n      return this.multiply(new PhysicsVector2(scalar, scalar));\n    };\n    PhysicsVector2.prototype.divide = function (vector2) {\n      return new PhysicsVector2(this.x / vector2.x, this.y / vector2.y);\n    };\n    PhysicsVector2.prototype.divideByScalar = function (scalar) {\n      return this.divide(new PhysicsVector2(scalar, scalar));\n    };\n    PhysicsVector2.prototype.rotateByRadians = function (radians) {\n      var x = this.x * Math.cos(radians) - this.y * Math.sin(radians);\n      var y = this.x * Math.sin(radians) + this.y * Math.cos(radians);\n      return new PhysicsVector2(x, y);\n    };\n    PhysicsVector2.prototype.normalize = function () {\n      var length = this.length;\n      var x = this.x / length;\n      var y = this.y / length;\n      return new PhysicsVector2(x, y);\n    };\n    PhysicsVector2.zero = new PhysicsVector2(0, 0);\n    return PhysicsVector2;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsVector2 = PhysicsVector2;\n  var Physics = function () {\n    function Physics() {}\n    Physics.clampScalar = function (scalar, lower, upper) {\n      if (scalar < lower) {\n        return lower;\n      }\n      if (scalar > upper) {\n        return upper;\n      }\n      return scalar;\n    };\n    Physics.directionToDegrees = function (from, to) {\n      var radians = Physics.directionToRadians(from, to);\n      var degrees = Physics.radiansToDegrees(radians);\n      return to.x - from.x > 0 ? -degrees : degrees;\n    };\n    Physics.radiansToDegrees = function (radians) {\n      return radians * 180 / Math.PI;\n    };\n    Physics.radiansToDirection = function (radians) {\n      return new PhysicsVector2(Math.sin(radians), Math.cos(radians));\n    };\n    Physics.degreesToRadians = function (degrees) {\n      return degrees / 180 * Math.PI;\n    };\n    Physics.directionToRadians = function (from, to) {\n      var dot = PhysicsVector2.dot(from, to);\n      var magnitude = from.length * to.length;\n      if (magnitude == 0) {\n        return 0;\n      }\n      var cosTheta = dot / magnitude;\n      return Math.abs(cosTheta) <= 1.0 ? Math.acos(cosTheta) : 0;\n    };\n    Physics.gravity = new PhysicsVector2(0, -1);\n    Physics.wind = new PhysicsVector2(0, 0);\n    Physics.maximumWeight = 100;\n    Physics.airResistance = 5;\n    Physics.movementThreshold = 0.001;\n    Physics.correctAngles = true;\n    return Physics;\n  }();\n  LIVE2DCUBISMFRAMEWORK.Physics = Physics;\n  var PhysicsParticle = function () {\n    function PhysicsParticle(initialPosition, mobility, delay, acceleration, radius) {\n      this.initialPosition = initialPosition;\n      this.mobility = mobility;\n      this.delay = delay;\n      this.acceleration = acceleration;\n      this.radius = radius;\n      this.position = initialPosition;\n      this.lastPosition = this.position;\n      this.lastGravity = new PhysicsVector2(0, -1);\n      this.force = new PhysicsVector2(0, 0);\n      this.velocity = new PhysicsVector2(0, 0);\n    }\n    return PhysicsParticle;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsParticle = PhysicsParticle;\n  var PhysicsFactorTuple = function () {\n    function PhysicsFactorTuple(x, y, angle) {\n      this.x = x;\n      this.y = y;\n      this.angle = angle;\n    }\n    PhysicsFactorTuple.prototype.add = function (factor) {\n      var x = this.x + factor.x;\n      var y = this.y + factor.y;\n      var angle = this.angle + factor.angle;\n      return new PhysicsFactorTuple(x, y, angle);\n    };\n    return PhysicsFactorTuple;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsFactorTuple = PhysicsFactorTuple;\n  var PhysicsNormalizationTuple = function () {\n    function PhysicsNormalizationTuple(minimum, maximum, def) {\n      this.minimum = minimum;\n      this.maximum = maximum;\n      this.def = def;\n    }\n    return PhysicsNormalizationTuple;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsNormalizationTuple = PhysicsNormalizationTuple;\n  var PhysicsNormalizationOptions = function () {\n    function PhysicsNormalizationOptions(position, angle) {\n      this.position = position;\n      this.angle = angle;\n    }\n    return PhysicsNormalizationOptions;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsNormalizationOptions = PhysicsNormalizationOptions;\n  var PhysicsInput = function () {\n    function PhysicsInput(targetId, weight, factor, invert) {\n      this.targetId = targetId;\n      this.weight = weight;\n      this.factor = factor;\n      this.invert = invert;\n    }\n    Object.defineProperty(PhysicsInput.prototype, \"normalizedWeight\", {\n      get: function () {\n        return Physics.clampScalar(this.weight / Physics.maximumWeight, 0, 1);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    PhysicsInput.prototype.evaluateFactor = function (parameterValue, parameterMinimum, parameterMaximum, parameterDefault, normalization) {\n      console.assert(parameterMaximum > parameterMinimum);\n      var parameterMiddle = this.getMiddleValue(parameterMinimum, parameterMaximum);\n      var value = parameterValue - parameterMiddle;\n      switch (Math.sign(value)) {\n        case 1:\n          {\n            var parameterRange = parameterMaximum - parameterMiddle;\n            if (parameterRange == 0) {\n              value = normalization.angle.def;\n            } else {\n              var normalizationRange = normalization.angle.maximum - normalization.angle.def;\n              if (normalizationRange == 0) {\n                value = normalization.angle.maximum;\n              } else {\n                value *= Math.abs(normalizationRange / parameterRange);\n                value += normalization.angle.def;\n              }\n            }\n          }\n          break;\n        case -1:\n          {\n            var parameterRange = parameterMiddle - parameterMinimum;\n            if (parameterRange == 0) {\n              value = normalization.angle.def;\n            } else {\n              var normalizationRange = normalization.angle.def - normalization.angle.minimum;\n              if (normalizationRange == 0) {\n                value = normalization.angle.minimum;\n              } else {\n                value *= Math.abs(normalizationRange / parameterRange);\n                value += normalization.angle.def;\n              }\n            }\n          }\n          break;\n        case 0:\n          {\n            value = normalization.angle.def;\n          }\n          break;\n      }\n      var weight = this.weight / Physics.maximumWeight;\n      value *= this.invert ? 1 : -1;\n      return new PhysicsFactorTuple(value * this.factor.x * weight, value * this.factor.y * weight, value * this.factor.angle * weight);\n    };\n    PhysicsInput.prototype.getRangeValue = function (min, max) {\n      var maxValue = Math.max(min, max);\n      var minValue = Math.min(min, max);\n      return Math.abs(maxValue - minValue);\n    };\n    PhysicsInput.prototype.getMiddleValue = function (min, max) {\n      var minValue = Math.min(min, max);\n      return minValue + this.getRangeValue(min, max) / 2;\n    };\n    return PhysicsInput;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsInput = PhysicsInput;\n  var PhysicsOutput = function () {\n    function PhysicsOutput(targetId, particleIndex, weight, angleScale, factor, invert) {\n      this.targetId = targetId;\n      this.particleIndex = particleIndex;\n      this.weight = weight;\n      this.factor = factor;\n      this.invert = invert;\n      this.factor.angle *= angleScale;\n    }\n    Object.defineProperty(PhysicsOutput.prototype, \"normalizedWeight\", {\n      get: function () {\n        return Physics.clampScalar(this.weight / Physics.maximumWeight, 0, 1);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    PhysicsOutput.prototype.evaluateValue = function (translation, particles) {\n      var value = translation.x * this.factor.x + translation.y * this.factor.y;\n      if (this.factor.angle > 0) {\n        var parentGravity = Physics.gravity;\n        if (Physics.correctAngles && this.particleIndex > 1) {\n          parentGravity = particles[this.particleIndex - 2].position.substract(particles[this.particleIndex - 1].position);\n        }\n        var angleResult = Physics.directionToRadians(parentGravity, translation);\n        value += (translation.x - parentGravity.x > 0 ? -angleResult : angleResult) * this.factor.angle;\n      }\n      value *= this.invert ? -1 : 1;\n      return value;\n    };\n    return PhysicsOutput;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsOutput = PhysicsOutput;\n  var PhysicsSubRig = function () {\n    function PhysicsSubRig(input, output, particles, normalization) {\n      this.input = input;\n      this.output = output;\n      this.particles = particles;\n      this.normalization = normalization;\n    }\n    PhysicsSubRig.prototype._update = function (deltaTime, target) {\n      var _this = this;\n      var parameters = target.parameters;\n      var factor = new PhysicsFactorTuple(0, 0, 0);\n      this.input.forEach(function (i) {\n        var parameterIndex = parameters.ids.indexOf(i.targetId);\n        if (parameterIndex == -1) {\n          return;\n        }\n        factor = factor.add(i.evaluateFactor(parameters.values[parameterIndex], parameters.minimumValues[parameterIndex], parameters.maximumValues[parameterIndex], parameters.defaultValues[parameterIndex], _this.normalization));\n      });\n      var a = Physics.degreesToRadians(-factor.angle);\n      var xy = new PhysicsVector2(factor.x, factor.y).rotateByRadians(a);\n      factor.x = xy.x;\n      factor.y = xy.y;\n      var factorRadians = a;\n      var gravityDirection = Physics.radiansToDirection(factorRadians).normalize();\n      this.particles.forEach(function (p, i) {\n        if (i == 0) {\n          p.position = new PhysicsVector2(factor.x, factor.y);\n          return;\n        }\n        p.force = gravityDirection.multiplyByScalar(p.acceleration).add(Physics.wind);\n        p.lastPosition = p.position;\n        var delay = p.delay * deltaTime * 30;\n        var direction = p.position.substract(_this.particles[i - 1].position);\n        var distance = PhysicsVector2.distance(PhysicsVector2.zero, direction);\n        var angle = Physics.directionToDegrees(p.lastGravity, gravityDirection);\n        var radians = Physics.degreesToRadians(angle) / Physics.airResistance;\n        direction = direction.rotateByRadians(radians).normalize();\n        p.position = _this.particles[i - 1].position.add(direction.multiplyByScalar(distance));\n        var velocity = p.velocity.multiplyByScalar(delay);\n        var force = p.force.multiplyByScalar(delay).multiplyByScalar(delay);\n        p.position = p.position.add(velocity).add(force);\n        var newDirection = p.position.substract(_this.particles[i - 1].position).normalize();\n        p.position = _this.particles[i - 1].position.add(newDirection.multiplyByScalar(p.radius));\n        if (Math.abs(p.position.x) < Physics.movementThreshold) {\n          p.position.x = 0;\n        }\n        if (delay != 0) {\n          p.velocity = p.position.substract(p.lastPosition).divideByScalar(delay).multiplyByScalar(p.mobility);\n        } else {\n          p.velocity = PhysicsVector2.zero;\n        }\n        p.force = PhysicsVector2.zero;\n        p.lastGravity = gravityDirection;\n      });\n    };\n    PhysicsSubRig.prototype._evaluate = function (target) {\n      var _this = this;\n      var parameters = target.parameters;\n      this.output.forEach(function (o) {\n        if (o.particleIndex < 1 || o.particleIndex >= _this.particles.length) {\n          return;\n        }\n        var parameterIndex = parameters.ids.indexOf(o.targetId);\n        if (parameterIndex == -1) {\n          return;\n        }\n        var translation = _this.particles[o.particleIndex - 1].position.substract(_this.particles[o.particleIndex].position);\n        var value = Physics.clampScalar(o.evaluateValue(translation, _this.particles), parameters.minimumValues[parameterIndex], parameters.maximumValues[parameterIndex]);\n        var unclampedParameterValue = parameters.values[parameterIndex] * (1 - o.normalizedWeight) + value * o.normalizedWeight;\n        parameters.values[parameterIndex] = Physics.clampScalar(unclampedParameterValue, parameters.minimumValues[parameterIndex], parameters.maximumValues[parameterIndex]);\n      });\n    };\n    return PhysicsSubRig;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsSubRig = PhysicsSubRig;\n  var PhysicsRig = function () {\n    function PhysicsRig(target, timeScale, physics3Json) {\n      var _this = this;\n      this.timeScale = 1;\n      this.timeScale = timeScale;\n      this._target = target;\n      if (!target) {\n        return;\n      }\n      this._subRigs = new Array();\n      physics3Json['PhysicsSettings'].forEach(function (r) {\n        var input = new Array();\n        r['Input'].forEach(function (i) {\n          var factor = new PhysicsFactorTuple(1, 0, 0);\n          if (i['Type'] == 'Y') {\n            factor.x = 0;\n            factor.y = 1;\n          } else if (i['Type'] == 'Angle') {\n            factor.x = 0;\n            factor.angle = 1;\n          }\n          input.push(new PhysicsInput(i['Source']['Id'], i['Weight'], factor, i['Reflect']));\n        });\n        var output = new Array();\n        r['Output'].forEach(function (o) {\n          var factor = new PhysicsFactorTuple(1, 0, 0);\n          if (o['Type'] == 'Y') {\n            factor.x = 0;\n            factor.y = 1;\n          } else if (o['Type'] == 'Angle') {\n            factor.x = 0;\n            factor.angle = 1;\n          }\n          output.push(new PhysicsOutput(o['Destination']['Id'], o['VertexIndex'], o['Weight'], o['Scale'], factor, o['Reflect']));\n        });\n        var particles = new Array();\n        r['Vertices'].forEach(function (p) {\n          var initialPosition = new PhysicsVector2(p['Position']['X'], p['Position']['Y']);\n          particles.push(new PhysicsParticle(initialPosition, p['Mobility'], p['Delay'], p['Acceleration'], p['Radius']));\n        });\n        var jsonOptions = r['Normalization'];\n        var positionsOption = new PhysicsNormalizationTuple(jsonOptions['Position']['Minimum'], jsonOptions['Position']['Maximum'], jsonOptions['Position']['Default']);\n        var anglesOption = new PhysicsNormalizationTuple(jsonOptions['Angle']['Minimum'], jsonOptions['Angle']['Maximum'], jsonOptions['Angle']['Default']);\n        var normalization = new PhysicsNormalizationOptions(positionsOption, anglesOption);\n        _this._subRigs.push(new PhysicsSubRig(input, output, particles, normalization));\n      });\n    }\n    PhysicsRig.prototype.updateAndEvaluate = function (deltaTime) {\n      var _this = this;\n      deltaTime *= this.timeScale > 0 ? this.timeScale : 0;\n      if (deltaTime > 0.01) {\n        this._subRigs.forEach(function (r) {\n          r._update(deltaTime, _this._target);\n        });\n      }\n      this._subRigs.forEach(function (r) {\n        r._evaluate(_this._target);\n      });\n    };\n    PhysicsRig._fromPhysics3Json = function (target, timeScale, physics3Json) {\n      var rig = new PhysicsRig(target, timeScale, physics3Json);\n      return rig._isValid ? rig : null;\n    };\n    Object.defineProperty(PhysicsRig.prototype, \"_isValid\", {\n      get: function () {\n        return this._target != null;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    return PhysicsRig;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsRig = PhysicsRig;\n  var PhysicsRigBuilder = function () {\n    function PhysicsRigBuilder() {\n      this._timeScale = 1;\n    }\n    PhysicsRigBuilder.prototype.setTarget = function (value) {\n      this._target = value;\n      return this;\n    };\n    PhysicsRigBuilder.prototype.setTimeScale = function (value) {\n      this._timeScale = value;\n      return this;\n    };\n    PhysicsRigBuilder.prototype.setPhysics3Json = function (value) {\n      this._physics3Json = value;\n      return this;\n    };\n    PhysicsRigBuilder.prototype.build = function () {\n      return PhysicsRig._fromPhysics3Json(this._target, this._timeScale, this._physics3Json);\n    };\n    return PhysicsRigBuilder;\n  }();\n  LIVE2DCUBISMFRAMEWORK.PhysicsRigBuilder = PhysicsRigBuilder;\n  var UserData = function () {\n    function UserData(target, userData3Json) {\n      var _this = this;\n      this._target = target;\n      if (!target) {\n        return;\n      }\n      this._version = userData3Json['Version'];\n      this._userDataCount = userData3Json['Meta']['UserDataCount'];\n      this._totalUserDataSize = userData3Json['Meta']['TotalUserDataSize'];\n      if (userData3Json['UserData'] != null) {\n        this._userDataBodys = new Array();\n        userData3Json['UserData'].forEach(function (u) {\n          _this._userDataBodys.push(new UserDataBody(u['Target'], u['Id'], u['Value']));\n        });\n        console.assert(this._userDataBodys.length === this._userDataCount);\n      }\n    }\n    UserData._fromUserData3Json = function (target, userData3Json) {\n      var userdata = new UserData(target, userData3Json);\n      return userdata._isValid ? userdata : null;\n    };\n    Object.defineProperty(UserData.prototype, \"_isValid\", {\n      get: function () {\n        return this._target != null;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(UserData.prototype, \"userDataCount\", {\n      get: function () {\n        if (this._userDataBodys == null) return 0;\n        return this._userDataCount;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(UserData.prototype, \"totalUserDataSize\", {\n      get: function () {\n        if (this._userDataBodys == null) return 0;\n        return this._totalUserDataSize;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(UserData.prototype, \"userDataBodys\", {\n      get: function () {\n        if (this._userDataBodys == null) return null;\n        return this._userDataBodys;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    UserData.prototype.isExistUserDataById = function (id_) {\n      if (this._userDataBodys == null) return false;\n      for (var _i = 0, _a = this._userDataBodys; _i < _a.length; _i++) {\n        var ud = _a[_i];\n        if (ud.id === id_) return true;\n      }\n      return false;\n    };\n    UserData.prototype.getUserDataValueById = function (id_) {\n      if (this._userDataBodys == null) return null;\n      for (var _i = 0, _a = this._userDataBodys; _i < _a.length; _i++) {\n        var ud = _a[_i];\n        if (ud.id === id_) return ud.value;\n      }\n      return null;\n    };\n    UserData.prototype.getUserDataTargetById = function (id_) {\n      if (this._userDataBodys == null) return null;\n      for (var _i = 0, _a = this._userDataBodys; _i < _a.length; _i++) {\n        var ud = _a[_i];\n        if (ud.id === id_) return ud.target;\n      }\n      return null;\n    };\n    UserData.prototype.getUserDataBodyById = function (id_) {\n      if (this._userDataBodys == null) return null;\n      for (var _i = 0, _a = this._userDataBodys; _i < _a.length; _i++) {\n        var ud = _a[_i];\n        if (ud.id === id_) return ud;\n      }\n      return null;\n    };\n    return UserData;\n  }();\n  LIVE2DCUBISMFRAMEWORK.UserData = UserData;\n  var UserDataBuilder = function () {\n    function UserDataBuilder() {}\n    UserDataBuilder.prototype.setTarget = function (value) {\n      this._target = value;\n      return this;\n    };\n    UserDataBuilder.prototype.setUserData3Json = function (value) {\n      return this._userData3Json = value;\n    };\n    UserDataBuilder.prototype.build = function () {\n      return UserData._fromUserData3Json(this._target, this._userData3Json);\n    };\n    return UserDataBuilder;\n  }();\n  LIVE2DCUBISMFRAMEWORK.UserDataBuilder = UserDataBuilder;\n  var UserDataBody = function () {\n    function UserDataBody(target, id, value) {\n      this.target = target;\n      this.id = id;\n      this.value = value;\n    }\n    return UserDataBody;\n  }();\n  LIVE2DCUBISMFRAMEWORK.UserDataBody = UserDataBody;\n  var UserDataTargetType;\n  (function (UserDataTargetType) {\n    UserDataTargetType[UserDataTargetType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    UserDataTargetType[UserDataTargetType[\"ArtMesh\"] = 1] = \"ArtMesh\";\n  })(UserDataTargetType || (UserDataTargetType = {}));\n  var Groups = function () {\n    function Groups(model3Json) {\n      var _this = this;\n      if (typeof model3Json['Groups'] !== \"undefined\") {\n        this._groupBodys = new Array();\n        model3Json['Groups'].forEach(function (u) {\n          _this._groupBodys.push(new GroupBody(u['Target'], u['Name'], u['Ids']));\n        });\n      } else {\n        this._groupBodys = null;\n      }\n    }\n    Object.defineProperty(Groups.prototype, \"data\", {\n      get: function () {\n        if (this._groupBodys == null) return null;\n        return this._groupBodys;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Groups.fromModel3Json = function (model3Json) {\n      return new Groups(model3Json);\n    };\n    Groups.prototype.getGroupById = function (targetId) {\n      if (this._groupBodys != null) {\n        for (var _i = 0, _a = this._groupBodys; _i < _a.length; _i++) {\n          var body = _a[_i];\n          if (body.name === targetId) return body;\n        }\n      }\n      return null;\n    };\n    return Groups;\n  }();\n  LIVE2DCUBISMFRAMEWORK.Groups = Groups;\n  var GroupBody = function () {\n    function GroupBody(target, name, ids) {\n      this.target = target;\n      this.name = name;\n      this.ids = ids;\n    }\n    return GroupBody;\n  }();\n  LIVE2DCUBISMFRAMEWORK.GroupBody = GroupBody;\n})(LIVE2DCUBISMFRAMEWORK || (LIVE2DCUBISMFRAMEWORK = {}));","map":{"version":3,"names":["LIVE2DCUBISMFRAMEWORK","AnimationPoint","time","value","AnimationUserDataBody","BuiltinAnimationSegmentEvaluators","lerp","a","b","t","LINEAR","points","offset","p0","p1","BEZIER","p01","p12","p23","p012","p123","STEPPED","INVERSE_STEPPED","AnimationSegment","evaluate","AnimationTrack","targetId","segments","prototype","s","lastS","length","Animation","motion3Json","_this","modelTracks","Array","parameterTracks","partOpacityTracks","userDataBodys","duration","fps","loop","userDataCount","totalUserDataSize","forEach","u","push","console","assert","c","type","track","fromMotion3Json","log","animation","isValid","addAnimationCallback","callbackFunc","_callbackFunctions","removeAnimationCallback","_target","_index","splice","clearAnimationCallback","callAnimationCallback","func","weight","blend","target","stackFlags","groups","p","parameters","ids","indexOf","sample","values","defaultValues","parts","opacities","g","getGroupById","_i","_a","tid","ud","isEventTriggered","_lastTime","timeEvaluate","timeForward","timeBack","Object","defineProperty","get","enumerable","configurable","BuiltinCrossfadeWeighters","AnimationState","BuiltinAnimationBlenders","OVERRIDE","source","destination","initial","ADD","MULTIPLY","AnimationLayer","_animation","_time","set","_play","play","fadeDuration","_goalAnimation","_goalTime","_fadeTime","_fadeDuration","currentTime","resume","pause","stop","_update","deltaTime","_evaluate","animationWeight","weightCrossfade","Animator","timeScale","layers","_layers","ret","l","isPlaying","addLayer","name","blender","layer","getLayer","has","removeLayer","delete","clearLayers","clear","updateAndEvaluate","paramStackFlags","count","fill","partsStackFlags","_create","animator","AnimatorBuilder","_timeScale","_layerNames","_layerBlenders","_layerCrossfadeWeighters","_layerWeights","setTarget","setTimeScale","build","Map","PhysicsVector2","x","y","distance","Math","abs","substract","dot","sqrt","add","vector2","multiply","multiplyByScalar","scalar","divide","divideByScalar","rotateByRadians","radians","cos","sin","normalize","zero","Physics","clampScalar","lower","upper","directionToDegrees","from","to","directionToRadians","degrees","radiansToDegrees","PI","radiansToDirection","degreesToRadians","magnitude","cosTheta","acos","gravity","wind","maximumWeight","airResistance","movementThreshold","correctAngles","PhysicsParticle","initialPosition","mobility","delay","acceleration","radius","position","lastPosition","lastGravity","force","velocity","PhysicsFactorTuple","angle","factor","PhysicsNormalizationTuple","minimum","maximum","def","PhysicsNormalizationOptions","PhysicsInput","invert","evaluateFactor","parameterValue","parameterMinimum","parameterMaximum","parameterDefault","normalization","parameterMiddle","getMiddleValue","sign","parameterRange","normalizationRange","getRangeValue","min","max","maxValue","minValue","PhysicsOutput","particleIndex","angleScale","evaluateValue","translation","particles","parentGravity","angleResult","PhysicsSubRig","input","output","i","parameterIndex","minimumValues","maximumValues","xy","factorRadians","gravityDirection","direction","newDirection","o","unclampedParameterValue","normalizedWeight","PhysicsRig","physics3Json","_subRigs","r","jsonOptions","positionsOption","anglesOption","_fromPhysics3Json","rig","_isValid","PhysicsRigBuilder","setPhysics3Json","_physics3Json","UserData","userData3Json","_version","_userDataCount","_totalUserDataSize","_userDataBodys","UserDataBody","_fromUserData3Json","userdata","isExistUserDataById","id_","id","getUserDataValueById","getUserDataTargetById","getUserDataBodyById","UserDataBuilder","setUserData3Json","_userData3Json","UserDataTargetType","Groups","model3Json","_groupBodys","GroupBody","fromModel3Json","body"],"sources":["/Users/kaileying/Documents/Repos/BinLTools_Gin/web/src/components/live2dWigit/live2dcubismframework.js"],"sourcesContent":["var LIVE2DCUBISMFRAMEWORK;\n(function (LIVE2DCUBISMFRAMEWORK) {\n    var AnimationPoint = (function () {\n        function AnimationPoint(time, value) {\n            this.time = time;\n            this.value = value;\n        }\n        return AnimationPoint;\n    }());\n    LIVE2DCUBISMFRAMEWORK.AnimationPoint = AnimationPoint;\n    var AnimationUserDataBody = (function () {\n        function AnimationUserDataBody(time, value) {\n            this.time = time;\n            this.value = value;\n        }\n        ;\n        return AnimationUserDataBody;\n    }());\n    LIVE2DCUBISMFRAMEWORK.AnimationUserDataBody = AnimationUserDataBody;\n    var BuiltinAnimationSegmentEvaluators = (function () {\n        function BuiltinAnimationSegmentEvaluators() {\n        }\n        BuiltinAnimationSegmentEvaluators.lerp = function (a, b, t) {\n            return new AnimationPoint((a.time + ((b.time - a.time) * t)), (a.value + ((b.value - a.value) * t)));\n        };\n        BuiltinAnimationSegmentEvaluators.LINEAR = function (points, offset, time) {\n            var p0 = points[offset + 0];\n            var p1 = points[offset + 1];\n            var t = (time - p0.time) / (p1.time - p0.time);\n            return (p0.value + ((p1.value - p0.value) * t));\n        };\n        BuiltinAnimationSegmentEvaluators.BEZIER = function (points, offset, time) {\n            var t = (time - points[offset + 0].time) / (points[offset + 3].time - points[offset].time);\n            var p01 = BuiltinAnimationSegmentEvaluators.lerp(points[offset + 0], points[offset + 1], t);\n            var p12 = BuiltinAnimationSegmentEvaluators.lerp(points[offset + 1], points[offset + 2], t);\n            var p23 = BuiltinAnimationSegmentEvaluators.lerp(points[offset + 2], points[offset + 3], t);\n            var p012 = BuiltinAnimationSegmentEvaluators.lerp(p01, p12, t);\n            var p123 = BuiltinAnimationSegmentEvaluators.lerp(p12, p23, t);\n            return BuiltinAnimationSegmentEvaluators.lerp(p012, p123, t).value;\n        };\n        BuiltinAnimationSegmentEvaluators.STEPPED = function (points, offset, time) {\n            return points[offset + 0].value;\n        };\n        BuiltinAnimationSegmentEvaluators.INVERSE_STEPPED = function (points, offset, time) {\n            return points[offset + 1].value;\n        };\n        return BuiltinAnimationSegmentEvaluators;\n    }());\n    LIVE2DCUBISMFRAMEWORK.BuiltinAnimationSegmentEvaluators = BuiltinAnimationSegmentEvaluators;\n    var AnimationSegment = (function () {\n        function AnimationSegment(offset, evaluate) {\n            this.offset = offset;\n            this.evaluate = evaluate;\n        }\n        return AnimationSegment;\n    }());\n    LIVE2DCUBISMFRAMEWORK.AnimationSegment = AnimationSegment;\n    var AnimationTrack = (function () {\n        function AnimationTrack(targetId, points, segments) {\n            this.targetId = targetId;\n            this.points = points;\n            this.segments = segments;\n        }\n        AnimationTrack.prototype.evaluate = function (time) {\n            var s = 0;\n            var lastS = this.segments.length - 1;\n            for (; s < lastS; ++s) {\n                if (this.points[this.segments[s + 1].offset].time < time) {\n                    continue;\n                }\n                break;\n            }\n            return this.segments[s].evaluate(this.points, this.segments[s].offset, time);\n        };\n        return AnimationTrack;\n    }());\n    LIVE2DCUBISMFRAMEWORK.AnimationTrack = AnimationTrack;\n    var Animation = (function () {\n        function Animation(motion3Json) {\n            var _this = this;\n            this.modelTracks = new Array();\n            this.parameterTracks = new Array();\n            this.partOpacityTracks = new Array();\n            this.userDataBodys = new Array();\n            this.duration = motion3Json['Meta']['Duration'];\n            this.fps = motion3Json['Meta']['Fps'];\n            this.loop = motion3Json['Meta']['Loop'];\n            this.userDataCount = motion3Json['Meta']['UserDataCount'];\n            this.totalUserDataSize = motion3Json['Meta']['TotalUserDataSize'];\n            if (motion3Json['UserData'] != null) {\n                motion3Json['UserData'].forEach(function (u) {\n                    _this.userDataBodys.push(new AnimationUserDataBody(u['Time'], u['Value']));\n                });\n                console.assert(this.userDataBodys.length === this.userDataCount);\n            }\n            motion3Json['Curves'].forEach(function (c) {\n                var s = c['Segments'];\n                var points = new Array();\n                var segments = new Array();\n                points.push(new AnimationPoint(s[0], s[1]));\n                for (var t = 2; t < s.length; t += 3) {\n                    var offset = points.length - 1;\n                    var evaluate = BuiltinAnimationSegmentEvaluators.LINEAR;\n                    var type = s[t];\n                    if (type == 1) {\n                        evaluate = BuiltinAnimationSegmentEvaluators.BEZIER;\n                        points.push(new AnimationPoint(s[t + 1], s[t + 2]));\n                        points.push(new AnimationPoint(s[t + 3], s[t + 4]));\n                        t += 4;\n                    }\n                    else if (type == 2) {\n                        evaluate = BuiltinAnimationSegmentEvaluators.STEPPED;\n                    }\n                    else if (type == 3) {\n                        evaluate = BuiltinAnimationSegmentEvaluators.INVERSE_STEPPED;\n                    }\n                    else if (type != 0) {\n                    }\n                    points.push(new AnimationPoint(s[t + 1], s[t + 2]));\n                    segments.push(new AnimationSegment(offset, evaluate));\n                }\n                var track = new AnimationTrack(c['Id'], points, segments);\n                if (c['Target'] == 'Model') {\n                    _this.modelTracks.push(track);\n                }\n                else if (c['Target'] == 'Parameter') {\n                    _this.parameterTracks.push(track);\n                }\n                else if (c['Target'] == 'PartOpacity') {\n                    _this.partOpacityTracks.push(track);\n                }\n                else {\n                }\n            });\n        }\n        Animation.fromMotion3Json = function (motion3Json) {\n            if (motion3Json == null) {\n                console.log(motion3Json)\n                return null;\n            }\n            var animation = new Animation(motion3Json);\n            // console.log(animation)\n            return (animation.isValid)\n                ? animation\n                : null;\n        };\n        Animation.prototype.addAnimationCallback = function (callbackFunc) {\n            if (this._callbackFunctions == null)\n                this._callbackFunctions = new Array();\n            this._callbackFunctions.push(callbackFunc);\n        };\n        Animation.prototype.removeAnimationCallback = function (callbackFunc) {\n            if (this._callbackFunctions != null) {\n                var _target = -1;\n                for (var _index = 0; _index < this._callbackFunctions.length; _index++) {\n                    if (this._callbackFunctions[_index] === callbackFunc) {\n                        _target = _index;\n                        break;\n                    }\n                }\n                if (_target >= 0)\n                    this._callbackFunctions.splice(_target, 1);\n            }\n        };\n        Animation.prototype.clearAnimationCallback = function () {\n            this._callbackFunctions = [];\n        };\n        Animation.prototype.callAnimationCallback = function (value) {\n            if (this._callbackFunctions.length > 0)\n                this._callbackFunctions.forEach(function (func) { func(value); });\n        };\n        Animation.prototype.evaluate = function (time, weight, blend, target, stackFlags, groups) {\n            if (groups === void 0) { groups = null; }\n            if (weight <= 0.01) {\n                return;\n            }\n            if (this.loop) {\n                while (time > this.duration) {\n                    time -= this.duration;\n                }\n            }\n            this.parameterTracks.forEach(function (t) {\n                var p = target.parameters.ids.indexOf(t.targetId);\n                if (p >= 0) {\n                    var sample = t.evaluate(time);\n                    if (stackFlags[0][p] != true) {\n                        target.parameters.values[p] = target.parameters.defaultValues[p];\n                        stackFlags[0][p] = true;\n                    }\n                    target.parameters.values[p] = blend(target.parameters.values[p], sample, t.evaluate(0), weight);\n                }\n            });\n            this.partOpacityTracks.forEach(function (t) {\n                var p = target.parts.ids.indexOf(t.targetId);\n                if (p >= 0) {\n                    var sample = t.evaluate(time);\n                    if (stackFlags[1][p] != true) {\n                        target.parts.opacities[p] = 1;\n                        stackFlags[1][p] = true;\n                    }\n                    target.parts.opacities[p] = blend(target.parts.opacities[p], sample, t.evaluate(0), weight);\n                }\n            });\n            this.modelTracks.forEach(function (t) {\n                if (groups != null) {\n                    var g = groups.getGroupById(t.targetId);\n                    if (g != null && g.target === \"Parameter\") {\n                        for (var _i = 0, _a = g.ids; _i < _a.length; _i++) {\n                            var tid = _a[_i];\n                            var p = target.parameters.ids.indexOf(tid);\n                            if (p >= 0) {\n                                var sample = t.evaluate(time);\n                                if (stackFlags[0][p] != true) {\n                                    target.parameters.values[p] = target.parameters.defaultValues[p];\n                                    stackFlags[0][p] = true;\n                                }\n                                target.parameters.values[p] = blend(target.parameters.values[p], sample, t.evaluate(0), weight);\n                            }\n                        }\n                    }\n                }\n            });\n            if (this._callbackFunctions != null) {\n                for (var _i = 0, _a = this.userDataBodys; _i < _a.length; _i++) {\n                    var ud = _a[_i];\n                    if (this.isEventTriggered(ud.time, time, this._lastTime, this.duration))\n                        this.callAnimationCallback(ud.value);\n                }\n            }\n            this._lastTime = time;\n        };\n        Animation.prototype.isEventTriggered = function (timeEvaluate, timeForward, timeBack, duration) {\n            if (timeForward > timeBack) {\n                if (timeEvaluate > timeBack && timeEvaluate < timeForward)\n                    return true;\n            }\n            else {\n                if (timeEvaluate > 0 && timeEvaluate < timeForward\n                    || timeEvaluate > timeBack && timeEvaluate < duration)\n                    return true;\n            }\n            return false;\n        };\n        Object.defineProperty(Animation.prototype, \"isValid\", {\n            get: function () {\n                return true;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Animation;\n    }());\n    LIVE2DCUBISMFRAMEWORK.Animation = Animation;\n    var BuiltinCrossfadeWeighters = (function () {\n        function BuiltinCrossfadeWeighters() {\n        }\n        BuiltinCrossfadeWeighters.LINEAR = function (time, duration) {\n            return (time / duration);\n        };\n        return BuiltinCrossfadeWeighters;\n    }());\n    LIVE2DCUBISMFRAMEWORK.BuiltinCrossfadeWeighters = BuiltinCrossfadeWeighters;\n    var AnimationState = (function () {\n        function AnimationState() {\n        }\n        return AnimationState;\n    }());\n    LIVE2DCUBISMFRAMEWORK.AnimationState = AnimationState;\n    var BuiltinAnimationBlenders = (function () {\n        function BuiltinAnimationBlenders() {\n        }\n        BuiltinAnimationBlenders.OVERRIDE = function (source, destination, initial, weight) {\n            return ((destination * weight) + source * (1 - weight));\n        };\n        BuiltinAnimationBlenders.ADD = function (source, destination, initial, weight) {\n            return (source + ((destination - initial) * weight));\n        };\n        BuiltinAnimationBlenders.MULTIPLY = function (source, destination, weight) {\n            return (source * (1 + ((destination - 1) * weight)));\n        };\n        return BuiltinAnimationBlenders;\n    }());\n    LIVE2DCUBISMFRAMEWORK.BuiltinAnimationBlenders = BuiltinAnimationBlenders;\n    var AnimationLayer = (function () {\n        function AnimationLayer() {\n            this.weight = 1;\n        }\n        Object.defineProperty(AnimationLayer.prototype, \"currentAnimation\", {\n            get: function () {\n                return this._animation;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AnimationLayer.prototype, \"currentTime\", {\n            get: function () {\n                return this._time;\n            },\n            set: function (value) {\n                this._time = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AnimationLayer.prototype, \"isPlaying\", {\n            get: function () {\n                return this._play;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        AnimationLayer.prototype.play = function (animation, fadeDuration) {\n            if (fadeDuration === void 0) { fadeDuration = 0; }\n            if (this._animation && fadeDuration > 0) {\n                this._goalAnimation = animation;\n                this._goalTime = 0;\n                this._fadeTime = 0;\n                this._fadeDuration = fadeDuration;\n            }\n            else {\n                this._animation = animation;\n                this.currentTime = 0;\n                this._play = true;\n            }\n        };\n        AnimationLayer.prototype.resume = function () {\n            this._play = true;\n        };\n        AnimationLayer.prototype.pause = function () {\n            this._play = false;\n        };\n        AnimationLayer.prototype.stop = function () {\n            this._play = false;\n            this.currentTime = 0;\n        };\n        AnimationLayer.prototype._update = function (deltaTime) {\n            if (!this._play) {\n                return;\n            }\n            this._time += deltaTime;\n            this._goalTime += deltaTime;\n            this._fadeTime += deltaTime;\n            if (this._animation == null || (!this._animation.loop && this._time > this._animation.duration)) {\n                this.stop();\n                this._animation = null;\n            }\n        };\n        AnimationLayer.prototype._evaluate = function (target, stackFlags) {\n            if (this._animation == null) {\n                return;\n            }\n            var weight = (this.weight < 1)\n                ? this.weight\n                : 1;\n            var animationWeight = (this._goalAnimation != null)\n                ? (weight * this.weightCrossfade(this._fadeTime, this._fadeDuration))\n                : weight;\n            this._animation.evaluate(this._time, animationWeight, this.blend, target, stackFlags, this.groups);\n            if (this._goalAnimation != null) {\n                animationWeight = 1 - (weight * this.weightCrossfade(this._fadeTime, this._fadeDuration));\n                this._goalAnimation.evaluate(this._goalTime, animationWeight, this.blend, target, stackFlags, this.groups);\n                if (this._fadeTime > this._fadeDuration) {\n                    this._animation = this._goalAnimation;\n                    this._time = this._goalTime;\n                    this._goalAnimation = null;\n                }\n            }\n        };\n        return AnimationLayer;\n    }());\n    LIVE2DCUBISMFRAMEWORK.AnimationLayer = AnimationLayer;\n    var Animator = (function () {\n        function Animator(target, timeScale, layers) {\n            this._target = target;\n            this.timeScale = timeScale;\n            this._layers = layers;\n        }\n        Object.defineProperty(Animator.prototype, \"target\", {\n            get: function () {\n                return this._target;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Animator.prototype, \"isPlaying\", {\n            get: function () {\n                var ret = false;\n                this._layers.forEach(function (l) {\n                    if (l.isPlaying) {\n                        ret = true;\n                        return;\n                    }\n                });\n                return ret;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Animator.prototype.addLayer = function (name, blender, weight) {\n            if (blender === void 0) { blender = BuiltinAnimationBlenders.OVERRIDE; }\n            if (weight === void 0) { weight = 1; }\n            var layer = new AnimationLayer();\n            layer.blend = blender;\n            layer.weightCrossfade = BuiltinCrossfadeWeighters.LINEAR;\n            layer.weight = weight;\n            layer.groups = this.groups;\n            this._layers.set(name, layer);\n        };\n        Animator.prototype.getLayer = function (name) {\n            return this._layers.has(name)\n                ? this._layers.get(name)\n                : null;\n        };\n        Animator.prototype.removeLayer = function (name) {\n            return this._layers.has(name)\n                ? this._layers.delete(name)\n                : null;\n        };\n        Animator.prototype.clearLayers = function () {\n            this._layers.clear();\n        };\n        Animator.prototype.updateAndEvaluate = function (deltaTime) {\n            var _this = this;\n            deltaTime *= ((this.timeScale > 0)\n                ? this.timeScale\n                : 0);\n            if (deltaTime > 0.001) {\n                this._layers.forEach(function (l) {\n                    l._update(deltaTime);\n                });\n            }\n            var paramStackFlags = new Array(this._target.parameters.count).fill(false);\n            var partsStackFlags = new Array(this._target.parts.count).fill(false);\n            var stackFlags = new Array(paramStackFlags, partsStackFlags);\n            this._layers.forEach(function (l) {\n                l._evaluate(_this._target, stackFlags);\n            });\n        };\n        Animator._create = function (target, timeScale, layers) {\n            var animator = new Animator(target, timeScale, layers);\n            return animator.isValid\n                ? animator\n                : null;\n        };\n        Object.defineProperty(Animator.prototype, \"isValid\", {\n            get: function () {\n                return this._target != null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Animator;\n    }());\n    LIVE2DCUBISMFRAMEWORK.Animator = Animator;\n    var AnimatorBuilder = (function () {\n        function AnimatorBuilder() {\n            this._timeScale = 1;\n            this._layerNames = new Array();\n            this._layerBlenders = new Array();\n            this._layerCrossfadeWeighters = new Array();\n            this._layerWeights = new Array();\n        }\n        AnimatorBuilder.prototype.setTarget = function (value) {\n            this._target = value;\n            return this;\n        };\n        AnimatorBuilder.prototype.setTimeScale = function (value) {\n            this._timeScale = value;\n            return this;\n        };\n        AnimatorBuilder.prototype.addLayer = function (name, blender, weight) {\n            if (blender === void 0) { blender = BuiltinAnimationBlenders.OVERRIDE; }\n            if (weight === void 0) { weight = 1; }\n            this._layerNames.push(name);\n            this._layerBlenders.push(blender);\n            this._layerCrossfadeWeighters.push(BuiltinCrossfadeWeighters.LINEAR);\n            this._layerWeights.push(weight);\n            return this;\n        };\n        AnimatorBuilder.prototype.build = function () {\n            var layers = new Map();\n            for (var l = 0; l < this._layerNames.length; ++l) {\n                var layer = new AnimationLayer();\n                layer.blend = this._layerBlenders[l];\n                layer.weightCrossfade = this._layerCrossfadeWeighters[l];\n                layer.weight = this._layerWeights[l];\n                layers.set(this._layerNames[l], layer);\n            }\n            return Animator._create(this._target, this._timeScale, layers);\n        };\n        return AnimatorBuilder;\n    }());\n    LIVE2DCUBISMFRAMEWORK.AnimatorBuilder = AnimatorBuilder;\n    var PhysicsVector2 = (function () {\n        function PhysicsVector2(x, y) {\n            this.x = x;\n            this.y = y;\n        }\n        PhysicsVector2.distance = function (a, b) {\n            return Math.abs(a.substract(b).length);\n        };\n        PhysicsVector2.dot = function (a, b) {\n            return ((a.x * b.x) + (a.y * b.y));\n        };\n        Object.defineProperty(PhysicsVector2.prototype, \"length\", {\n            get: function () {\n                return Math.sqrt(PhysicsVector2.dot(this, this));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PhysicsVector2.prototype.add = function (vector2) {\n            return new PhysicsVector2(this.x + vector2.x, this.y + vector2.y);\n        };\n        PhysicsVector2.prototype.substract = function (vector2) {\n            return new PhysicsVector2(this.x - vector2.x, this.y - vector2.y);\n        };\n        PhysicsVector2.prototype.multiply = function (vector2) {\n            return new PhysicsVector2(this.x * vector2.x, this.y * vector2.y);\n        };\n        PhysicsVector2.prototype.multiplyByScalar = function (scalar) {\n            return this.multiply(new PhysicsVector2(scalar, scalar));\n        };\n        PhysicsVector2.prototype.divide = function (vector2) {\n            return new PhysicsVector2(this.x / vector2.x, this.y / vector2.y);\n        };\n        PhysicsVector2.prototype.divideByScalar = function (scalar) {\n            return this.divide(new PhysicsVector2(scalar, scalar));\n        };\n        PhysicsVector2.prototype.rotateByRadians = function (radians) {\n            var x = (this.x * Math.cos(radians)) - (this.y * Math.sin(radians));\n            var y = (this.x * Math.sin(radians)) + (this.y * Math.cos(radians));\n            return new PhysicsVector2(x, y);\n        };\n        PhysicsVector2.prototype.normalize = function () {\n            var length = this.length;\n            var x = this.x / length;\n            var y = this.y / length;\n            return new PhysicsVector2(x, y);\n        };\n        PhysicsVector2.zero = new PhysicsVector2(0, 0);\n        return PhysicsVector2;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsVector2 = PhysicsVector2;\n    var Physics = (function () {\n        function Physics() {\n        }\n        Physics.clampScalar = function (scalar, lower, upper) {\n            if (scalar < lower) {\n                return lower;\n            }\n            if (scalar > upper) {\n                return upper;\n            }\n            return scalar;\n        };\n        Physics.directionToDegrees = function (from, to) {\n            var radians = Physics.directionToRadians(from, to);\n            var degrees = Physics.radiansToDegrees(radians);\n            return ((to.x - from.x) > 0)\n                ? -degrees\n                : degrees;\n        };\n        Physics.radiansToDegrees = function (radians) {\n            return ((radians * 180) / Math.PI);\n        };\n        Physics.radiansToDirection = function (radians) {\n            return new PhysicsVector2(Math.sin(radians), Math.cos(radians));\n        };\n        Physics.degreesToRadians = function (degrees) {\n            return ((degrees / 180) * Math.PI);\n        };\n        Physics.directionToRadians = function (from, to) {\n            var dot = PhysicsVector2.dot(from, to);\n            var magnitude = from.length * to.length;\n            if (magnitude == 0) {\n                return 0;\n            }\n            var cosTheta = (dot / magnitude);\n            return (Math.abs(cosTheta) <= 1.0)\n                ? Math.acos(cosTheta)\n                : 0;\n        };\n        Physics.gravity = new PhysicsVector2(0, -1);\n        Physics.wind = new PhysicsVector2(0, 0);\n        Physics.maximumWeight = 100;\n        Physics.airResistance = 5;\n        Physics.movementThreshold = 0.001;\n        Physics.correctAngles = true;\n        return Physics;\n    }());\n    LIVE2DCUBISMFRAMEWORK.Physics = Physics;\n    var PhysicsParticle = (function () {\n        function PhysicsParticle(initialPosition, mobility, delay, acceleration, radius) {\n            this.initialPosition = initialPosition;\n            this.mobility = mobility;\n            this.delay = delay;\n            this.acceleration = acceleration;\n            this.radius = radius;\n            this.position = initialPosition;\n            this.lastPosition = this.position;\n            this.lastGravity = new PhysicsVector2(0, -1);\n            this.force = new PhysicsVector2(0, 0);\n            this.velocity = new PhysicsVector2(0, 0);\n        }\n        return PhysicsParticle;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsParticle = PhysicsParticle;\n    var PhysicsFactorTuple = (function () {\n        function PhysicsFactorTuple(x, y, angle) {\n            this.x = x;\n            this.y = y;\n            this.angle = angle;\n        }\n        PhysicsFactorTuple.prototype.add = function (factor) {\n            var x = this.x + factor.x;\n            var y = this.y + factor.y;\n            var angle = this.angle + factor.angle;\n            return new PhysicsFactorTuple(x, y, angle);\n        };\n        return PhysicsFactorTuple;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsFactorTuple = PhysicsFactorTuple;\n    var PhysicsNormalizationTuple = (function () {\n        function PhysicsNormalizationTuple(minimum, maximum, def) {\n            this.minimum = minimum;\n            this.maximum = maximum;\n            this.def = def;\n        }\n        return PhysicsNormalizationTuple;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsNormalizationTuple = PhysicsNormalizationTuple;\n    var PhysicsNormalizationOptions = (function () {\n        function PhysicsNormalizationOptions(position, angle) {\n            this.position = position;\n            this.angle = angle;\n        }\n        return PhysicsNormalizationOptions;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsNormalizationOptions = PhysicsNormalizationOptions;\n    var PhysicsInput = (function () {\n        function PhysicsInput(targetId, weight, factor, invert) {\n            this.targetId = targetId;\n            this.weight = weight;\n            this.factor = factor;\n            this.invert = invert;\n        }\n        Object.defineProperty(PhysicsInput.prototype, \"normalizedWeight\", {\n            get: function () {\n                return Physics.clampScalar(this.weight / Physics.maximumWeight, 0, 1);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PhysicsInput.prototype.evaluateFactor = function (parameterValue, parameterMinimum, parameterMaximum, parameterDefault, normalization) {\n            console.assert(parameterMaximum > parameterMinimum);\n            var parameterMiddle = this.getMiddleValue(parameterMinimum, parameterMaximum);\n            var value = parameterValue - parameterMiddle;\n            switch (Math.sign(value)) {\n                case 1:\n                    {\n                        var parameterRange = parameterMaximum - parameterMiddle;\n                        if (parameterRange == 0) {\n                            value = normalization.angle.def;\n                        }\n                        else {\n                            var normalizationRange = normalization.angle.maximum - normalization.angle.def;\n                            if (normalizationRange == 0) {\n                                value = normalization.angle.maximum;\n                            }\n                            else {\n                                value *= Math.abs(normalizationRange / parameterRange);\n                                value += normalization.angle.def;\n                            }\n                        }\n                    }\n                    break;\n                case -1:\n                    {\n                        var parameterRange = parameterMiddle - parameterMinimum;\n                        if (parameterRange == 0) {\n                            value = normalization.angle.def;\n                        }\n                        else {\n                            var normalizationRange = normalization.angle.def - normalization.angle.minimum;\n                            if (normalizationRange == 0) {\n                                value = normalization.angle.minimum;\n                            }\n                            else {\n                                value *= Math.abs(normalizationRange / parameterRange);\n                                value += normalization.angle.def;\n                            }\n                        }\n                    }\n                    break;\n                case 0:\n                    {\n                        value = normalization.angle.def;\n                    }\n                    break;\n            }\n            var weight = (this.weight / Physics.maximumWeight);\n            value *= (this.invert) ? 1 : -1;\n            return new PhysicsFactorTuple(value * this.factor.x * weight, value * this.factor.y * weight, value * this.factor.angle * weight);\n        };\n        PhysicsInput.prototype.getRangeValue = function (min, max) {\n            var maxValue = Math.max(min, max);\n            var minValue = Math.min(min, max);\n            return Math.abs(maxValue - minValue);\n        };\n        PhysicsInput.prototype.getMiddleValue = function (min, max) {\n            var minValue = Math.min(min, max);\n            return minValue + (this.getRangeValue(min, max) / 2);\n        };\n        return PhysicsInput;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsInput = PhysicsInput;\n    var PhysicsOutput = (function () {\n        function PhysicsOutput(targetId, particleIndex, weight, angleScale, factor, invert) {\n            this.targetId = targetId;\n            this.particleIndex = particleIndex;\n            this.weight = weight;\n            this.factor = factor;\n            this.invert = invert;\n            this.factor.angle *= angleScale;\n        }\n        Object.defineProperty(PhysicsOutput.prototype, \"normalizedWeight\", {\n            get: function () {\n                return Physics.clampScalar(this.weight / Physics.maximumWeight, 0, 1);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PhysicsOutput.prototype.evaluateValue = function (translation, particles) {\n            var value = (translation.x * this.factor.x) + (translation.y * this.factor.y);\n            if (this.factor.angle > 0) {\n                var parentGravity = Physics.gravity;\n                if (Physics.correctAngles && this.particleIndex > 1) {\n                    parentGravity = particles[this.particleIndex - 2].position\n                        .substract(particles[this.particleIndex - 1].position);\n                }\n                var angleResult = (Physics.directionToRadians(parentGravity, translation));\n                value += (((translation.x - parentGravity.x) > 0) ? -angleResult : angleResult) * this.factor.angle;\n            }\n            value *= ((this.invert)\n                ? -1\n                : 1);\n            return value;\n        };\n        return PhysicsOutput;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsOutput = PhysicsOutput;\n    var PhysicsSubRig = (function () {\n        function PhysicsSubRig(input, output, particles, normalization) {\n            this.input = input;\n            this.output = output;\n            this.particles = particles;\n            this.normalization = normalization;\n        }\n        PhysicsSubRig.prototype._update = function (deltaTime, target) {\n            var _this = this;\n            var parameters = target.parameters;\n            var factor = new PhysicsFactorTuple(0, 0, 0);\n            this.input.forEach(function (i) {\n                var parameterIndex = parameters.ids.indexOf(i.targetId);\n                if (parameterIndex == -1) {\n                    return;\n                }\n                factor = factor.add(i.evaluateFactor(parameters.values[parameterIndex], parameters.minimumValues[parameterIndex], parameters.maximumValues[parameterIndex], parameters.defaultValues[parameterIndex], _this.normalization));\n            });\n            var a = Physics.degreesToRadians(-factor.angle);\n            var xy = new PhysicsVector2(factor.x, factor.y).rotateByRadians(a);\n            factor.x = xy.x;\n            factor.y = xy.y;\n            var factorRadians = a;\n            var gravityDirection = Physics\n                .radiansToDirection(factorRadians)\n                .normalize();\n            this.particles.forEach(function (p, i) {\n                if (i == 0) {\n                    p.position = new PhysicsVector2(factor.x, factor.y);\n                    return;\n                }\n                p.force = gravityDirection.multiplyByScalar(p.acceleration).add(Physics.wind);\n                p.lastPosition = p.position;\n                var delay = p.delay * deltaTime * 30;\n                var direction = p.position.substract(_this.particles[i - 1].position);\n                var distance = PhysicsVector2.distance(PhysicsVector2.zero, direction);\n                var angle = Physics.directionToDegrees(p.lastGravity, gravityDirection);\n                var radians = Physics.degreesToRadians(angle) / Physics.airResistance;\n                direction = direction\n                    .rotateByRadians(radians)\n                    .normalize();\n                p.position = _this.particles[i - 1].position.add(direction.multiplyByScalar(distance));\n                var velocity = p.velocity.multiplyByScalar(delay);\n                var force = p.force\n                    .multiplyByScalar(delay)\n                    .multiplyByScalar(delay);\n                p.position = p.position\n                    .add(velocity)\n                    .add(force);\n                var newDirection = p.position\n                    .substract(_this.particles[i - 1].position)\n                    .normalize();\n                p.position = _this.particles[i - 1].position.add(newDirection.multiplyByScalar(p.radius));\n                if (Math.abs(p.position.x) < Physics.movementThreshold) {\n                    p.position.x = 0;\n                }\n                if (delay != 0) {\n                    p.velocity = p.position\n                        .substract(p.lastPosition)\n                        .divideByScalar(delay)\n                        .multiplyByScalar(p.mobility);\n                }\n                else {\n                    p.velocity = PhysicsVector2.zero;\n                }\n                p.force = PhysicsVector2.zero;\n                p.lastGravity = gravityDirection;\n            });\n        };\n        PhysicsSubRig.prototype._evaluate = function (target) {\n            var _this = this;\n            var parameters = target.parameters;\n            this.output.forEach(function (o) {\n                if (o.particleIndex < 1 || o.particleIndex >= _this.particles.length) {\n                    return;\n                }\n                var parameterIndex = parameters.ids.indexOf(o.targetId);\n                if (parameterIndex == -1) {\n                    return;\n                }\n                var translation = _this.particles[o.particleIndex - 1].position.substract(_this.particles[o.particleIndex].position);\n                var value = Physics.clampScalar(o.evaluateValue(translation, _this.particles), parameters.minimumValues[parameterIndex], parameters.maximumValues[parameterIndex]);\n                var unclampedParameterValue = (parameters.values[parameterIndex] * (1 - o.normalizedWeight)) + (value * o.normalizedWeight);\n                parameters.values[parameterIndex] = Physics.clampScalar(unclampedParameterValue, parameters.minimumValues[parameterIndex], parameters.maximumValues[parameterIndex]);\n            });\n        };\n        return PhysicsSubRig;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsSubRig = PhysicsSubRig;\n    var PhysicsRig = (function () {\n        function PhysicsRig(target, timeScale, physics3Json) {\n            var _this = this;\n            this.timeScale = 1;\n            this.timeScale = timeScale;\n            this._target = target;\n            if (!target) {\n                return;\n            }\n            this._subRigs = new Array();\n            physics3Json['PhysicsSettings'].forEach(function (r) {\n                var input = new Array();\n                r['Input'].forEach(function (i) {\n                    var factor = new PhysicsFactorTuple(1, 0, 0);\n                    if (i['Type'] == 'Y') {\n                        factor.x = 0;\n                        factor.y = 1;\n                    }\n                    else if (i['Type'] == 'Angle') {\n                        factor.x = 0;\n                        factor.angle = 1;\n                    }\n                    input.push(new PhysicsInput(i['Source']['Id'], i['Weight'], factor, i['Reflect']));\n                });\n                var output = new Array();\n                r['Output'].forEach(function (o) {\n                    var factor = new PhysicsFactorTuple(1, 0, 0);\n                    if (o['Type'] == 'Y') {\n                        factor.x = 0;\n                        factor.y = 1;\n                    }\n                    else if (o['Type'] == 'Angle') {\n                        factor.x = 0;\n                        factor.angle = 1;\n                    }\n                    output.push(new PhysicsOutput(o['Destination']['Id'], o['VertexIndex'], o['Weight'], o['Scale'], factor, o['Reflect']));\n                });\n                var particles = new Array();\n                r['Vertices'].forEach(function (p) {\n                    var initialPosition = new PhysicsVector2(p['Position']['X'], p['Position']['Y']);\n                    particles.push(new PhysicsParticle(initialPosition, p['Mobility'], p['Delay'], p['Acceleration'], p['Radius']));\n                });\n                var jsonOptions = r['Normalization'];\n                var positionsOption = new PhysicsNormalizationTuple(jsonOptions['Position']['Minimum'], jsonOptions['Position']['Maximum'], jsonOptions['Position']['Default']);\n                var anglesOption = new PhysicsNormalizationTuple(jsonOptions['Angle']['Minimum'], jsonOptions['Angle']['Maximum'], jsonOptions['Angle']['Default']);\n                var normalization = new PhysicsNormalizationOptions(positionsOption, anglesOption);\n                _this._subRigs.push(new PhysicsSubRig(input, output, particles, normalization));\n            });\n        }\n        PhysicsRig.prototype.updateAndEvaluate = function (deltaTime) {\n            var _this = this;\n            deltaTime *= ((this.timeScale > 0)\n                ? this.timeScale\n                : 0);\n            if (deltaTime > 0.01) {\n                this._subRigs.forEach(function (r) {\n                    r._update(deltaTime, _this._target);\n                });\n            }\n            this._subRigs.forEach(function (r) {\n                r._evaluate(_this._target);\n            });\n        };\n        PhysicsRig._fromPhysics3Json = function (target, timeScale, physics3Json) {\n            var rig = new PhysicsRig(target, timeScale, physics3Json);\n            return (rig._isValid)\n                ? rig\n                : null;\n        };\n        Object.defineProperty(PhysicsRig.prototype, \"_isValid\", {\n            get: function () {\n                return this._target != null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return PhysicsRig;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsRig = PhysicsRig;\n    var PhysicsRigBuilder = (function () {\n        function PhysicsRigBuilder() {\n            this._timeScale = 1;\n        }\n        PhysicsRigBuilder.prototype.setTarget = function (value) {\n            this._target = value;\n            return this;\n        };\n        PhysicsRigBuilder.prototype.setTimeScale = function (value) {\n            this._timeScale = value;\n            return this;\n        };\n        PhysicsRigBuilder.prototype.setPhysics3Json = function (value) {\n            this._physics3Json = value;\n            return this;\n        };\n        PhysicsRigBuilder.prototype.build = function () {\n            return PhysicsRig._fromPhysics3Json(this._target, this._timeScale, this._physics3Json);\n        };\n        return PhysicsRigBuilder;\n    }());\n    LIVE2DCUBISMFRAMEWORK.PhysicsRigBuilder = PhysicsRigBuilder;\n    var UserData = (function () {\n        function UserData(target, userData3Json) {\n            var _this = this;\n            this._target = target;\n            if (!target) {\n                return;\n            }\n            this._version = userData3Json['Version'];\n            this._userDataCount = userData3Json['Meta']['UserDataCount'];\n            this._totalUserDataSize = userData3Json['Meta']['TotalUserDataSize'];\n            if (userData3Json['UserData'] != null) {\n                this._userDataBodys = new Array();\n                userData3Json['UserData'].forEach(function (u) {\n                    _this._userDataBodys.push(new UserDataBody(u['Target'], u['Id'], u['Value']));\n                });\n                console.assert(this._userDataBodys.length === this._userDataCount);\n            }\n        }\n        UserData._fromUserData3Json = function (target, userData3Json) {\n            var userdata = new UserData(target, userData3Json);\n            return (userdata._isValid)\n                ? userdata\n                : null;\n        };\n        Object.defineProperty(UserData.prototype, \"_isValid\", {\n            get: function () {\n                return this._target != null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(UserData.prototype, \"userDataCount\", {\n            get: function () {\n                if (this._userDataBodys == null)\n                    return 0;\n                return this._userDataCount;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(UserData.prototype, \"totalUserDataSize\", {\n            get: function () {\n                if (this._userDataBodys == null)\n                    return 0;\n                return this._totalUserDataSize;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(UserData.prototype, \"userDataBodys\", {\n            get: function () {\n                if (this._userDataBodys == null)\n                    return null;\n                return this._userDataBodys;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        UserData.prototype.isExistUserDataById = function (id_) {\n            if (this._userDataBodys == null)\n                return false;\n            for (var _i = 0, _a = this._userDataBodys; _i < _a.length; _i++) {\n                var ud = _a[_i];\n                if (ud.id === id_)\n                    return true;\n            }\n            return false;\n        };\n        UserData.prototype.getUserDataValueById = function (id_) {\n            if (this._userDataBodys == null)\n                return null;\n            for (var _i = 0, _a = this._userDataBodys; _i < _a.length; _i++) {\n                var ud = _a[_i];\n                if (ud.id === id_)\n                    return ud.value;\n            }\n            return null;\n        };\n        UserData.prototype.getUserDataTargetById = function (id_) {\n            if (this._userDataBodys == null)\n                return null;\n            for (var _i = 0, _a = this._userDataBodys; _i < _a.length; _i++) {\n                var ud = _a[_i];\n                if (ud.id === id_)\n                    return ud.target;\n            }\n            return null;\n        };\n        UserData.prototype.getUserDataBodyById = function (id_) {\n            if (this._userDataBodys == null)\n                return null;\n            for (var _i = 0, _a = this._userDataBodys; _i < _a.length; _i++) {\n                var ud = _a[_i];\n                if (ud.id === id_)\n                    return ud;\n            }\n            return null;\n        };\n        return UserData;\n    }());\n    LIVE2DCUBISMFRAMEWORK.UserData = UserData;\n    var UserDataBuilder = (function () {\n        function UserDataBuilder() {\n        }\n        UserDataBuilder.prototype.setTarget = function (value) {\n            this._target = value;\n            return this;\n        };\n        UserDataBuilder.prototype.setUserData3Json = function (value) {\n            return this._userData3Json = value;\n        };\n        UserDataBuilder.prototype.build = function () {\n            return UserData._fromUserData3Json(this._target, this._userData3Json);\n        };\n        return UserDataBuilder;\n    }());\n    LIVE2DCUBISMFRAMEWORK.UserDataBuilder = UserDataBuilder;\n    var UserDataBody = (function () {\n        function UserDataBody(target, id, value) {\n            this.target = target;\n            this.id = id;\n            this.value = value;\n        }\n        return UserDataBody;\n    }());\n    LIVE2DCUBISMFRAMEWORK.UserDataBody = UserDataBody;\n    var UserDataTargetType;\n    (function (UserDataTargetType) {\n        UserDataTargetType[UserDataTargetType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n        UserDataTargetType[UserDataTargetType[\"ArtMesh\"] = 1] = \"ArtMesh\";\n    })(UserDataTargetType || (UserDataTargetType = {}));\n    var Groups = (function () {\n        function Groups(model3Json) {\n            var _this = this;\n            if (typeof (model3Json['Groups']) !== \"undefined\") {\n                this._groupBodys = new Array();\n                model3Json['Groups'].forEach(function (u) {\n                    _this._groupBodys.push(new GroupBody(u['Target'], u['Name'], u['Ids']));\n                });\n            }\n            else {\n                this._groupBodys = null;\n            }\n        }\n        Object.defineProperty(Groups.prototype, \"data\", {\n            get: function () {\n                if (this._groupBodys == null)\n                    return null;\n                return this._groupBodys;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Groups.fromModel3Json = function (model3Json) {\n            return new Groups(model3Json);\n        };\n        Groups.prototype.getGroupById = function (targetId) {\n            if (this._groupBodys != null) {\n                for (var _i = 0, _a = this._groupBodys; _i < _a.length; _i++) {\n                    var body = _a[_i];\n                    if (body.name === targetId)\n                        return body;\n                }\n            }\n            return null;\n        };\n        return Groups;\n    }());\n    LIVE2DCUBISMFRAMEWORK.Groups = Groups;\n    var GroupBody = (function () {\n        function GroupBody(target, name, ids) {\n            this.target = target;\n            this.name = name;\n            this.ids = ids;\n        }\n        return GroupBody;\n    }());\n    LIVE2DCUBISMFRAMEWORK.GroupBody = GroupBody;\n})(LIVE2DCUBISMFRAMEWORK || (LIVE2DCUBISMFRAMEWORK = {}));\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}